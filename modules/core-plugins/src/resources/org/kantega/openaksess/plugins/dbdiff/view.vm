#macro(printNull $value)
    #if(!$value)
        null
    #else
        $value
    #end
#end

#macro(explainAddedColumn $change)
    Column <code>$change.newColumn.name</code> added
#end

#macro(explainColumnChange $schema $change)
#set($origColumn = $change.findChangedColumn($schema.actual, false))
    Column <code>$change.changedColumn</code> changed:
<ul>

    #if($change.isTypeChanged($schema.platform.platformInfo, $origColumn, $change.newColumn))
        <li>Type changed from $origColumn.type to $change.newColumn.type </li>
    #end
    #if($change.isSizeChanged($schema.platform.platformInfo, $origColumn, $change.newColumn))
        <li>Size changed from $origColumn.size to $change.newColumn.size </li>
    #end
    #if($change.isDefaultValueChanged($origColumn, $change.newColumn))
        <li>Default value changed from <code>#printNull($origColumn.defaultValue)</code> to <code>#printNull($change.newColumn.defaultValue)</code> </li>
    #end
    #if($change.isRequiredStatusChanged($origColumn, $change.newColumn))
        <li>Required status changed from <code>$origColumn.required</code> to <code>$change.newColumn.required</code> </li>
    #end
    #if($change.isAutoIncrementChanged($origColumn, $change.newColumn))
        <li>Autoincrement changed from <code>$origColumn.autoIncrement</code> to <code>$change.newColumn.autoIncrement</code> </li>
    #end
</ul>
#end

#macro(explainRecretionChange $schema $change)
    #if(!$dbDiffTool.canMigrateData($change))
        WARNING! Performing this change will LOSE DATA. The table will be dropped hard and recreated without data.
    #end
    Table needs to be recreated for the following reasons:

<ul>
    #foreach($origChange in $change.originalChanges)
        <li>#explainChange($schema, $origChange)</li>
    #end
</ul>

#end
#macro(explainChange $schema $change)
    #if($change.class.simpleName == "RecreateTableChange")
        #explainRecretionChange($schema, $change)
    #elseif ($change.class.simpleName == "ColumnDefinitionChange")
        #explainColumnChange($schema, $change)
    #elseif ($change.class.simpleName == "AddColumnChange")
        #explainAddedColumn($change)
    #elseif ($change.class.simpleName == "AddTableChange")
        Table <code>$change.newTable.name</code> needs to be added
    #elseif ($change.class.simpleName == "AddForeignKeyChange")
        Foreign key needs to be added referencing table <code>${change.newForeignKey.foreignTable.name}</code>
        ( Columns: 
        #foreach($ref in $change.newForeignKey.references)
            <code>$ref.localColumn.name -> <code>$ref.foreignColumn.name</code>
            #if( $velocityHasNext ),#end
        #end)
    #elseif ($change.class.simpleName == "RemoveForeignKeyChange")
        Foreign key should be removed
    #elseif ($change.class.simpleName == "AddIndexChange")
        Index <code>$change.newIndex.name</code> needs to be added
    #elseif ($change.class.simpleName == "RemoveIndexChange")
        Index <code>$change.findChangedIndex($schema.actual, false).name</code> may be removed
    #elseif ($change.class.simpleName == "ColumnOrderChange")
        The order of the columns in the table differs
    #else
        $change.class.simpleName (Unknown)
    #end
#end

#setTitle('dbdiff.title')
#section("content")

#box()
<h1>Summary</h1>
<table>
    <tr>
        <th>Schema name</th>
        <th>Status</th>
    </tr>
    #foreach($schema in $schemas)
        <tr>
            <td>
                <a href="#db$schema.wanted.name">$schema.wanted.name</a>
            </td>
            <td>
                #if($schema.changes.isEmpty())
                    Up to date
                #else
                    $schema.changes.size() suggested changes
                #end
            </td>
        </tr>
    #end

</table>

<h2>Unknown tables</h2>
#if($unknownTables.isEmpty())
    The database has no unknown tables
#else
    The database has $unknownTables.size() unknown table(s):
    <ul>
        #foreach($tableName in $unknownTables)
            <li>$tableName</li>
        #end
    </ul>
    <p>Generated DDLUtils model of the table(s):</p>
    <textarea style="width:100%;height:30px">$unknownModel</textarea> 
#end


#end
#foreach($schema in $schemas)
#box()
    <a name="db$schema.wanted.name"
    <h1>$schema.wanted.name - <code>$schema.resourcePath</code></h1>

    #if($schema.changes.isEmpty())
    <p>Database is up to date.</p>
    #else
    <h3>All changes SQL:</h3>
        #if(!$dbDiffTool.canMigrateData($schema.changes))
        WARNING! Performing this change will LOSE DATA. Some tables will be dropped hard and recreated without data!
        #end
    <textarea style="width:100%;height: 80px">${schema.sql}</textarea>

    <h3>Detailed changes:</h3>

    <table width="100%" style="table-layout:fixed;">
        <tr>
            <th width="30%">Table</th>
            <th width="40%">Changes</th>
            <th width="30%">SQL</th>
        </tr>
        #foreach($change in $schema.changes)
            <tr>
                <td valign="top" width="30%" style="word-wrap:break-word;" >
                    <code>#if($change.changedTable)$change.changedTable#else$change.newTable.name#end</code>
                </td>

                <td valign="top" style="word-wrap:break-word;" width="40%">
                    #explainChange($schema, $change)
                </td>
                <th valign="top" width="30%" style="word-wrap:break-word;" >
                    <textarea style="width:100%;height: 200px">$dbDiffTool.getAlterString($schema.actual, $change, $schema.platform)</textarea>
                </th>

            </tr>
        #end
    </table>
    #end
    #end
#end
#end


#applyAdminLayout()