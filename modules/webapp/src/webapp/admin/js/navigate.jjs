/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 //<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%@ page import="no.kantega.publishing.admin.AdminRequestParameters" %>
//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>
//<%
    request.setAttribute("aksess_locale", Aksess.getDefaultAdminLocale());
//%>

/********************************************************************************
 * Navigator
 *
 * Functions and actions related to the navitator
 ********************************************************************************/

var suppressNavigatorUpdate = false;

/**
 * Navigator actions
 */
$(document).ready(function(){
    debug("navigate.$(document).ready()");
    bindNavigatorClickEvents();
    makeNavigatorResizable();
});


/**
 * Performes necessary actions to make the navigator frame (left column) resizable.
 * Dragging the FramesplitDrag-element resizes the columns.
 * When dragging the navigator column, the content frame must be resized accordingly.
 *
 * TODO: Fix height after resize for IE
 */
function makeNavigatorResizable() {
    debug("navigate.makeNavigatorResizable(): Init");
    $("#Navigation").resizable(
        {
            minWidth: 50,
            minHeight: 50,
            handles: 'e',
            start: function(){
                if (typeof navigatorResizeOnStart == 'function') {
                    navigatorResizeOnStart();
                }
            },
            stop: function() {
                if (typeof navigatorResizeOnStop == 'function') {
                    navigatorResizeOnStop();
                }
            },
            resize: function() {
                if (typeof navigatorResizeOnResize == 'function') {
                    navigatorResizeOnResize();
                }
            }
        }
    );
}


/**
 * Defines actions for clicks in the navigator.
 */
function bindNavigatorClickEvents() {
    //Click on the openState (+/-) icon of an expanded node.
    $(".navigator span.openState > a.open").live('click', function(event){
        debug("navigate.bindNavigatorClickEvents(): click closeTree");
        event.preventDefault();
        var itemIdentifier = getItemIdentifierFromNavigatorHref($(this).attr("href"));
        closeTree(itemIdentifier);
    });
    //Click on the openState (+/-) icon of a collapsed node.
    $(".navigator span.openState > a.closed").live('click', function(event){
        debug("navigate.bindNavigatorClickEvents(): click openTree");
        event.preventDefault();
        var itemIdentifier = getItemIdentifierFromNavigatorHref($(this).attr("href"));
        openTree(itemIdentifier);
    });
    //Click on the title
    $(".navigator span.title > a, #Breadcrumbs a, #Statusbar .statusDetails .breadcrumbs a").live('click', function(event){
        debug("navigate.bindNavigatorClickEvents(): click openContent");
        event.preventDefault();
        var href = $(this).attr("href");
        var itemIdentifier = getItemIdentifierFromNavigatorHref(href);
        if(typeof onNavigatorTitleClick == 'function') {
            onNavigatorTitleClick($(this));
        }
        if(typeof updateMainPane == 'function') {
            updateMainPane(itemIdentifier, true);
        }
    });
}


/**
 * Refreshes the navigator.
 *
 * @param itemIdentifier Current selected item
 * @param expand Expand the menu down to selected item.
 */
function updateNavigator(itemIdentifier, expand) {
    debug("navigate.updateNavigator(): itemIdentifier: " + itemIdentifier + ", expand: " + expand);
    var params = getNavigatorParams();
    if (itemIdentifier) {
        params.itemIdentifier = itemIdentifier;
    }
    if( $("#NavigatorState .openFolders").html() != null) {
        params.openFolders = $("#NavigatorState .openFolders").html();
    }
    params.expand = expand;

    $("#Navigator").load(getNavigatorAction(), params, function() {
        debug("navigate.updateNavigator(): response from " + getNavigatorAction() + " received");
        setContextMenus();
    });
}





/**
 * Binds a context menu to a specific navigator link type.
 *
 * @param type css class of the a-element in the navigator.
 * @param disabledOptions Array of disabled options. Must be the href-value in the menu's a-element, without the leading hash (#).
 */
function setContextMenu(type, disabledOptions) {

    $("#Navigator span.title a." + type).contextMenu(
        {
            menu: 'ContextMenu-'+type
        },
        function(action, el, pos) {
            var href = $(el).attr("href");
            debug("navigate.setContextMenu(): clicked url: "+ href);
            eval("handleContextMenuClick_"+type+"(action, href)");
        }
    );
    if (disabledOptions) {
        var disable = "";
        for(var i = 0; i < disabledOptions.length; i++) {
            disable += "#"+disabledOptions[i];
            if (i != (disabledOptions.length-1)) {
                disable += ",";
            }
        }
        debug("navigate.setContextMenu(): disabled options: "+ disable);
        $("#ContextMenu-"+type).disableContextMenuItems(disable);
    }
    debug("navigate.setContextMenu(): "+ type +" menu set");
}





function openTree(itemIdentifier) {
    debug("navigate.openTree(): itemIdentifier: " + itemIdentifier);
    setFolderOpen(itemIdentifier);
    updateNavigator(itemIdentifier, false);
}


function closeTree(itemIdentifier) {
    debug("navigate.closeTree(): itemIdentifier: " + itemIdentifier);
    setFolderClosed(itemIdentifier);
    updateNavigator(itemIdentifier, false);
}



function setFolderOpen(id) {
    var newList = $("#NavigatorState .openFolders").html();
    debug("navigate.setFolderOpen(): newList: " + newList + ", id: " + id);

    var openList = newList.split(",");
    for (var i = 0; i < openList.length; i++) {
        var current = openList[i];
        if (id == current) {
            return;
        }
    }

    if (newList.length == 0) {
        newList = "" + id;
    } else {
        newList = newList + "," + id;
    }

    debug("navigate.setFolderOpen(): newList: " + newList);

    $("#NavigatorState .openFolders").html(newList);
}


function setFolderClosed(id) {
    var openList = $("#NavigatorState .openFolders").html().split(",");
    debug("navigate.setFolderClosed(): openList: " + openList + ", id: " + id);

    var newOpenList  = "";
    for (var i = 0; i < openList.length; i++) {
       var current = openList[i];
       if (id == current) {
          // Skip
       } else {
          if (newOpenList.length > 0) newOpenList += ",";
          newOpenList += current;
       }
    }

    debug("navigate.setFolderClosed(): newOpenList: " + newOpenList);

    $("#NavigatorState .openFolders").html(newOpenList);
}








/********************************************************************************
 * Search
 ********************************************************************************/
 $(document).ready(function(){
     bindSearchInput();
 });

function bindSearchInput() {
    $("#SearchButton").click(function(e){
            e.preventDefault(); //Preventing the form from being subitted the ordinary way.
            var textInput = $("#SearchQuery");
            var query = textInput.val();
            if (Search.inputValid(query)) {
                Search.search(query);
            }
    });
}

var Search = {
    search : function(query){
        debug("navigate.Search.search(): query: " + query);
        var searchUrl = "<%=request.getContextPath()%>/admin/publish/Search.action?q=" + query;
        //getSearchAction();
        var searchResult = $("#SearchResults");
        searchResult.html('<iframe name="search" title="Search results" src="' + searchUrl + '">');
        //TODO: Implement properly. Fetch search results with ajax.
        /*
        var searchResults = $("<div/>").attr("id", "SearchResults").html("<p>You searched: " + query + "</p>").slideDown("slow");
        $("#ContentFrame").append(searchResults);
        var closeLink = $("<a>").addClass("close").attr("href", "#").html("Close");
        closeLink.click(function(){
            $(this).parent().slideUp("slow");
        });
        searchResults.append(closeLink);
        */
        debug("show searchresults");
        searchResult.slideDown("slow").resizable({
            handles: 's',
            start: function(){
                if (typeof navigatorResizeOnStart == 'function') {
                    debug("content.navigatorResizeOnStart(): Adding overlay");
                    var height = searchResult.height();
                    var width = searchResult.width();
                    var searchoverlay = $("<div/>").css("position", "absolute").css("height", height + "px").css("width", width + "px").css("background", "#ffffff").css("opacity", "0").attr("id", "Searchoverlay");
                    $("#SearchResults iframe").before(searchoverlay);
                    navigatorResizeOnStart();
                }
            },
            stop: function() {
                if (typeof navigatorResizeOnStop == 'function') {
                    $("#Searchoverlay").remove();
                    navigatorResizeOnStop();
                }
            },
            resize: function() {
                if (typeof navigatorResizeOnResize == 'function') {
                    navigatorResizeOnResize();
                }
            }
        });
    },

    inputValid : function(query){
        debug("navigate.Search.inputValid(): query: " + query);
        query = query.trim();
        if (query.length >= 3) {
            return true;
        } else {
            return false;
        }
    }
};






