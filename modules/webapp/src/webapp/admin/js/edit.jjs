/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%@ page contentType="text/html;charset=utf-8" language="java" pageEncoding="iso-8859-1" %>
//<%@ taglib uri="http://www.kantega.no/aksess/tags/commons" prefix="kantega" %>
//<%request.setAttribute("aksess_locale", Aksess.getDefaultAdminLocale());%>

openaksess.editcontext = function()  {
    this.focusField = null;
    this.focusFieldDefaultMaxWidth = 600;
    this.editIsModified = false;
    this.doInsertTag  = false;

    var that = this;

    /*
     * Get elements from select list as string
     */
    function getEntriesFromList(list) {
        var entries = "";

        for (var i=0; i < list.options.length; i++) {
            if (i > 0) {
                entries += ",";
            }
            entries += list.options[i].value;
        }
        return entries;
    }

    /*
     *  Used in URLs to force refresh
     */
    function getRefresh() {
        var dt = new Date();
        return "" + dt.getTime();
    }


    /*
     *  Update status set that page has been edited
     */
    return {
        setIsModified : function() {
            that.editIsModified = true;
        },

        isModified : function () {
            return that.editIsModified || (tinyMCE && tinyMCE.activeEditor && tinyMCE.activeEditor.isDirty());
        },


        editKeyPress : function (e) {
            if (that.focusField != null) {
                that.editIsModified = true;
            }
            return true;
        },

        /*
         *  Sets field as focused element
         */
        setFocusField : function (field) {
            that.focusField = field;
        },


        blurField : function () {
            that.focusField = null;
        },


        /**
         * Update topics
         */
        updateTopics : function (params) {
            $("#TopicList").load("../topicmaps/HandleContentTopics.action", params, function() {
                $(".topic > .buttonGroup > a.delete").click(function(event){
                    event.preventDefault();
                    var topicMapId = getQueryParam("topicMapId", $(this).attr("href"));
                    var topicId = getQueryParam("topicId", $(this).attr("href"));
                    debug("bindTopicDeleteButtons(): click a.delete, topicId=" + topicId);
                    that.removeTopic(topicId, topicMapId);
                });
                debug("updateTopics(): received topics");
            });
        },

        addTopicAutocomplete : function() {
            var $input = $("#TopicInput");
            
            var defaultValue = $input.val();
            $input.focus(function(){
                $(this).val("");
            }).blur(function(){
                $(this).val(defaultValue);
            });

            var tmp = this;
            $input.autocomplete("${pageContext.request.contextPath}/ajax/AutocompleteTopics.action").result(function(event, data, formatted) {
                var topicName = data[0];
                var topicId = data[1].split(":");
                that.focusField = null;
                tmp.addTopic(topicId[0], topicId[1], topicName);
                $(this).blur();
            });
        },

        /**
         *  Remove topic from edited page
         */
        removeTopic : function  (topicId, topicMapId) {
            var params = new Object();
            params.topicId = topicId;
            params.topicMapId = topicMapId;
            params.remove = true;
            this.updateTopics(params);
        },



        /**
         *  Let user select a topic
         */
        selectTopic : function (formElement, multiple) {
            that.focusField = formElement;
            ModalWindow.open({title:'<kantega:label key="aksess.selecttopic.title"/>', iframe:true, href: "../topicmaps/SelectTopics.action?refresh=" + getRefresh(),width: 300, height:400});
        },

        /**
         *  Callback to add topic to current page
         */
        addTopic : function (topicMapId, topicId, topicName) {
            this.setIsModified();
            debug("add topic: " + topicName + ", topicId:" + topicId[1] + " topicMapId:" + topicId[0]);
            if (that.focusField == null) {
                // Update topic list
                var params = new Object();
                params.topicId = topicId;
                params.topicMapId = topicMapId;
                params.add = true;
                this.updateTopics(params);
            } else {
                // Topic should be inserted into a input field
                var name = that.focusField.name;
                var textField = that.focusField.form.elements[name + 'text'];
                if (textField) {
                    that.focusField.value = "" + topicMapId + ":" + topicId;
                    textField.value = topicName;
                }
            }
        },

        /*
         *  Popup window for selecting a page url
         */
        selectContentUrl : function (formElement) {
            that.focusField = formElement;
            that.doInsertTag = true;
            ModalWindow.open({title:'<kantega:label key="aksess.popup.selectcontent"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/popups/SelectContent.action?refresh=" + getRefresh(),width: 280, height:450});
        },


        /*
         *  Popup vindu for selecting a page id
         */
        selectContent : function (formElement, maxItems) {
            var items = 0;

            if (arguments.length < 2) {
                maxItems = 1;
            } else {
                var list = formElement.form[formElement.name + 'list'];
                if(list) {
                    items = list.length;
                }
            }

            if (items >= maxItems) {
                alert('<kantega:label key="aksess.js.advarsel.dukanmaksimaltvelge"/> ' + maxItems + ' <kantega:label key="aksess.js.advarsel.elementer"/>');
            } else {
                that.focusField = formElement;
                that.doInsertTag = false;
                ModalWindow.open({title:'<kantega:label key="aksess.popup.selectcontent"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/popups/SelectContent.action?refresh=" + getRefresh(),width: 280, height:450});
            }
        },


        /*
         *  Popup window for selecting a user
         */
        selectUser : function (formElement) {
            that.focusField = formElement;
            that.doInsertTag = false;
            ModalWindow.open({title:'<kantega:label key="aksess.adduser.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/security/SelectUsers.action?select=true&refresh=" + getRefresh(),width: 380, height:450});
        },

        /*
         *  Popup window for selecting a organizational unit
         */
        selectOrgunit : function (formElement) {
            that.focusField = formElement;
            that.doInsertTag = false;
            var orgwin = window.open("../popups/selectorgunit.jsp?refresh=" + getRefresh(), "usrWindow", "toolbar=no,width=300,height=300,resizable=yes,scrollbars=no");
            orgwin.focus();
        },

        /*
         *  Popup window for selecting a category
         */
        selectCategory : function (formElement) {
            that.focusField = formElement;
            that.doInsertTag = false;
            var catwin = window.open("../popups/selectcategory.jsp?refresh=" + getRefresh(), "usrWindow", "toolbar=no,width=300,height=300,resizable=yes,scrollbars=no");
            catwin.focus();
        },

        /*
         *  Popup window for selecting media object
         */
        selectMultimedia : function (formElement, filter) {
            that.focusField = formElement;
            var id = -1;
            if (that.focusField.value != "") {
                id = that.focusField.value;
            }

            that.doInsertTag = false;
            ModalWindow.open({title:'<kantega:label key="aksess.multimedia.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/multimedia/Navigate.action?id=" + id + "&filter=" + filter + "refresh=" + getRefresh(),width: 880, height:620});
        },


        /*
         * Popup window for selecting media folder
         */
        selectMediaFolder : function (formElement) {
            that.focusField = eval(formElement);
            that.doInsertTag = false;
            ModalWindow.open({title:'<kantega:label key="aksess.multimedia.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/popups/SelectMediaFolder.action?refresh=" + getRefresh() ,width: 280, height:450});
        },


        /*
         * Popup window for selecting a role
         */
        selectRole : function (formElement) {
            that.focusField = formElement;
            ModalWindow.open({title:'<kantega:label key="aksess.addrole.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/security/SelectRoles.action?select=true&refresh=" + getRefresh() ,width: 280, height:340});
        },


        /*
         * Popup for adding a list option used for editablelists
         */
        addListOption : function (formElement, attributeKey, language) {
            that.focusField = formElement;
            ModalWindow.open({title:'<kantega:label key="aksess.editablelist.value"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/EditListOption.action?attributeKey=" + escape(attributeKey) + "&language=" + language + "&refresh=" + getRefresh() ,width: 280, height:140});
        },


        /*
         * Adds option to select list
         */
        insertOptionIntoList : function (value) {
            var option = document.createElement("option");
            option.value = value;
            option.text = value;

            for(var i = 0; i < that.focusField.options.length; i++) {
                var o = that.focusField.options[i];
                if(value < o.value) {
                    try {
                        that.focusField.add(option, focusField.options[i]);
                    } catch(ex) { // IE
                        that.focusField.add(option, i);
                    }
                    break;
                } else if(i == that.focusField.options.length - 1) {
                    try {
                        that.focusField.add(option);
                    } catch (ex) {
                        that.focusField.add(option, null);
                    }

                    break;
                }

            }
            option.selected = true;
        },

        /*
         * Remove list option from list
         */
        removeOptionFromList : function removeOptionFromList(formElement, attributeKey, language) {
            $.post("../publish/RemoveListOption.action", {value:formElement.value, attributeKey: attributeKey, language:language}, function(data) {
                debug("editable list - option remove:" + formElement.value);
                for (var i=0; i < formElement.options.length; i++) {
                    if (formElement.options[i].selected) {
                        formElement.options[i] = null;
                        this.setIsModified();
                    }
                }
            });
        },


        /*
         * Insert id and value into form field
         */
        insertIdAndValueIntoForm : function insertIdAndValueIntoForm(id, text) {
            that.setIsModified();

            if (that.focusField != null) {
                var name = that.focusField.name;

                var textField = that.focusField.form.elements[name + 'text'];
                var listField = that.focusField.form.elements[name + 'list'];
                if (listField) {
                    // Field is a list
                    var found = false;
                    // Check if not added before
                    for(var i = 0; i < listField.options.length; i++) {
                        var val = listField.options[i].value ;
                        if(val == id) {
                            found = true;
                            break;
                        }
                    }
                    if(!found) {
                        listField.options[listField.options.length] = new Option(text, id, 0, 0);
                        that.focusField.value = getEntriesFromList(listField);
                    }
                } else if (textField) {
                    // Is textfield
                    that.focusField.value = "" + id;
                    textField.value = text;
                } else {
                    that.focusField.value = "" + id;
                }
            }
        },


        /*
         * Remove id and value from form
         */
        removeIdAndValueFromForm : function removeIdAndValueFromForm(field) {
            var frm = field.form;
            var text = frm.elements[field.name + 'text'];
            var list = frm.elements[field.name + 'list'];

            if (text) {
                this.setIsModified();
                field.value = "";
                text.value = "";
            } else if (list) {
                for (var i=0; i < list.options.length; i++) {
                    if (list.options[i].selected) {
                        list.options[i] = null;
                        that.setIsModified();
                    }
                }

                // Oppdaterer hidden felt med riktig verdi
                field.value = getEntriesFromList(list);
            } else {
                field.value = "";
            }
        },


        /*
         *  Move element in select list up or down
         */
        moveId : function (field, dir) {
            var list = field.form.elements[field.name + 'list'];

            for (var i=0; i < list.options.length; i++) {
                if (list.options[i].selected) {
                    if (dir < 0) {
                        if (i == 0) {
                            return;
                        }
                    } else if (dir > 0){
                        if (i == list.options.length - 1) {
                            return;
                        }
                    }

                    var tmpText  = list.options[i+dir].text;
                    var tmpValue = list.options[i+dir].value;

                    list.options[i+dir].text  = list.options[i].text;
                    list.options[i+dir].value = list.options[i].value;

                    list.options[i].text  = tmpText;
                    list.options[i].value = tmpValue;

                    list.options[i+dir].selected = true;

                    that.setIsModified();
                    field.value = getEntriesFromList(list);

                    return;
                }
            }
        },

        /*
         * Insert value into form
         */
        insertValueIntoForm : function (val) {
            this.setIsModified();
            if (that.focusField != null) {
                that.focusField.value = "" + val;
            }
        },

        /*
         * Set flag indicating attachment should be deleted
         */
        removeAttachment : function (element) {
            this.setIsModified();
            var name = element.name;
            var field = element.form['delete_' + name];
            field.value = "1";
        },

        clearDefaultValue : function(field, defaultValue) {
            if (field.value == defaultValue) {
                field.value = '';
            }
        },

        setDefaultValue : function(field, defaultValue) {
            if (field.value == '') {
                field.value = defaultValue;
            }
        }

    };
}();

document.onkeypress = openaksess.editcontext.editKeyPress;

