//<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%@ page import="no.kantega.publishing.admin.AdminRequestParameters" %>
//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>
/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/********************************************************************************
 * Global functions
 ********************************************************************************/

var suppressNavigatorUpdate = false;
var currentUrl = "";

/**
 * Global load action
 */
$(document).ready(function() {
    debug("$(document).ready(): Main");
    dwr.engine.setHeaders({ "X-Requested-With":"XMLHttpRequest"});
    setWinowSize();
    bindContentupdateEvents();
    setContentupdateTrigger();
    setOpenElementFromSession();
});


/**
 * Adjusts the height and width of the iframe onload and onresize.
 */
function setWinowSize() {
    $(window).bind('resize load', function(e) {
        debug("setWindowSize(): " + e.type + " event received");

        var topHeight = $("#Top").height();
        var statusbarHeight = $("#ContentFrame .statusbar").height();
        var filteroptionsHeight = $("#Navigation .filteroptions").height();
        var navigationWidth = $("#Navigation").width();
        var framesplitWidth = $("#Framesplit").width();
        debug("setWindowSize(): topHeight: " + topHeight + ", navigationWidth: " + navigationWidth + ", framesplitWidth: " + framesplitWidth);

        $("#Navigator").css('height', ($(window).height()-topHeight-filteroptionsHeight-5) + 'px');
        $('#Content').css('height', ($(window).height()-topHeight-statusbarHeight) + 'px');
        $('#Content iframe').css('height', ($(window).height()-topHeight-statusbarHeight-3) + 'px').css('width', ($(window).width()-navigationWidth-framesplitWidth-2) + 'px');
    });
}

/**
 * Contains the binding of all elements that are listening to the contentupdate event.
 * New global listeners to this event should be added here.
 */
function bindContentupdateEvents() {
    //Enables the navigator to listen to contentupdate events. Called every time a contentupdate event is fired.
    $("#Navigator").bind("contentupdate", function(e, url){
        debug("bindContentupdateEvents(): contentupdate event received");
        if (!suppressNavigatorUpdate) {
            updateNavigator(url, true);
        } else {
            suppressNavigatorUpdate = false;
            debug("bindContentupdateEvents(): navigationUpdate suppressed");
        }
    });
//    New listeners can be added here:
//    $([element listening to event]).bind("contentupdate", function(e, url) {
//        [perform actions]
//    });
}

/**
 * Attaches an onload listener to the contentframe and triggers a contentupdate event every time this onload event is fired,
 * i.e. on every page load in the iframe.
 *
 * Sends the current url as data with the event.
 *
 * Notifies the ContentStateHandler of the currently viewed page in order for this to be stored in the session.
 */
function setContentupdateTrigger() {
    $("#Contentmain").load(function() {
        var currentContent = getCurrentFrameLocation().href;
        ContentStateHandler.notifyContentUpdate(currentContent, function(success){
            if(!success) {
                debug("setContentupdateTrigger(): dwr ContentStateHandler.notifyContentUpdate() success");
            } else {
                debug("setContentupdateTrigger(): dwr ContentStateHandler.notifyContentUpdate() failed");
                //TODO: Handle
            }
        });
        currentUrl = currentContent;
        $.event.trigger("contentupdate",[currentContent]);
    });
}


/**
 * Retrieves the last recently viewed content element from the session and sets this as current element
 */
function setOpenElementFromSession() {
    ContentStateHandler.getCurrentContent(function(associationId){
        updateNavigator(getContentUrlFromAssociationId(associationId), true);    
    });
}


/**
 * Returns the location object for the contentmain iframe.
 */
function getCurrentFrameLocation() {
    return document.getElementById("Contentmain").contentWindow.document.location;
}


/**
 * Changes the cotent of the contentmain iframe.
 * Such a change will trigger a contentupdate trigger if not suppressNavigatorUpdate is explicitly set to true
 *
 * @param url
 * @param suppressNavigatorUpdate true/false. A contentupdate event will be triggered unless set to true.
 */
function updateContentFrame(url, suppressNavigatorUpdate) {
    debug("updateContentFrame(): url: " + url);
    if (suppressNavigatorUpdate) {
        suppressNavigatorUpdate = true;
    }
    getCurrentFrameLocation().href = url;
}


/********************************************************************************
 * Navigator
 *
 * Functions and actions related to the navitator
 ********************************************************************************/


/**
 * Navigator actions
 */
$(document).ready(function(){
    debug("$(document).ready(): Navigation");
    makeNavigatorResizable();
});

/**
 * Performes necessary actions to make the navigator frame (left column) resizable.
 * Dragging the FramesplitDrag-element resizes the columns.
 * When dragging the navigator column, the content frame must be resized accordingly.
 *
 * TODO: Fix height after resize for IE
 */
function makeNavigatorResizable() {
    debug("makeNavigatorResizable(): Init");
    $("#Navigation").Resizable(
        {
            minWidth: 50,
            minHeight: 50,
            handlers: {
                e: '#FramesplitDrag'
            },
            onStart: function(){
                debug("makeNavigatorResizable(): onDragStart");
                var height = $("#ContentFrame").height();
                var width = $("#ContentFrame").width();
                var contentoverlay = $("<div/>").css("position", "absolute").css("height", height + "px").css("width", width + "px").css("background", "transparent").attr("id", "Contentoverlay");
                $("#ContentFrame iframe").before(contentoverlay);
            },
            onStop: function() {
                debug("makeNavigatorResizable(): onDragStop");
                $.event.trigger("resize");
                $("#Contentoverlay").remove();
            },
            onResize: function() {
                var navigationWidth = $("#Navigation").width();
                var framesplitWidth = $("#Framesplit").width();
                $("#Contentoverlay, #ContentFrame iframe").css("width", ($(window).width()-navigationWidth-framesplitWidth-2) + 'px');
            }
        }
    );
}


/**
 * Defines actions for clicks in the navigator.
 */
function bindNavigatorClickEvents() {
    //Click on the openState (+/-) icon of an expanded node.
    $(".navigator span.openState > a.open").click(function(event){
        debug("bindNavigatorClickEvents(): click closeTree");
        event.preventDefault();
        closeTree(this);
    });
    //Click on the openState (+/-) icon of a collapsed node.
    $(".navigator span.openState > a.closed").click(function(event){
        debug("bindNavigatorClickEvents(): click openTree");
        event.preventDefault();
        openTree(this);
    });
    //Click on the title
    $(".navigator span.title > a").click(function(event){
        debug("bindNavigatorClickEvents(): click openContent");
        event.preventDefault();
        var url = getContentUrlFromNavigatorHref($(this).attr("href"));
        updateContentFrame(url, true);
        updateNavigator(url, true);
    });
}


/**
 * Refreshes the navigator.
 *
 * @param url Current selected item
 * @param expand Expand the menu down to selected item.
 */
function updateNavigator(url, expand) {
    debug("updateNavigator(): url: " + url + ", expand: " + expand);
    var params = new Object();
    params.url = url;
    if($("#NavigatorState .sort").html() != null) {
        params.sort = $("#NavigatorState .sort").html();
    }
    if( $("#NavigatorState .openFolders").html() != null) {
        params.openFolders = $("#NavigatorState .openFolders").html();
    }
    params.expand = expand;

    $("#Navigator").load("<%=Aksess.getContextPath()%>/admin/publish/ContentNavigator.action", params, function() {
        debug("updateNavigator(): response from ContentNavigator.action received");
        bindNavigatorClickEvents();
        setContextMenus();
    });
}


/**
 * Sets the context (right click) menus in the navigator.
 */
function setContextMenus() {
    setContextMenu("page", ['paste', 'pasteAsShortcut']);
    setContextMenu("link", ['paste', 'pasteAsShortcut']);
}


/**
 * Binds a context menu to a specific navigator link type.
 *
 * @param type css class of the a-element in the navigator.
 * @param disabledOptions Array of disabled options. Must be the href-value in the menu's a-element, without the leading hash (#).
 */
function setContextMenu(type, disabledOptions) {

    $("#Navigator span.title a." + type).contextMenu(
        {
            menu: 'ContextMenu-'+type
        },
        function(action, el, pos) {
            var href = $(el).attr("href");
            debug("setContextMenu(): clicked url: "+ href);
            eval("handleContextMenuClick_"+type+"(action, href)");
        }
    );
    if (disabledOptions) {
        var disable = "";
        for(var i = 0; i < disabledOptions.length; i++) {
            disable += "#"+disabledOptions[i];
            if (i != (disabledOptions.length-1)) {
                disable += ",";
            }
        }
        debug("setContextMenu(): disabled options: "+ disable);
        $("#ContextMenu-"+type).disableContextMenuItems(disable);
    }
    debug("setContextMenu(): "+ type +" menu set");
}


/**
 * Handles selections in the context menu for menu items of type page.
 *
 * @param action The selected action e.g. 'copy'
 * @param href The value of the href-attribute for the selected item.
 */
function handleContextMenuClick_page(action, href) {
    debug("handleContextMenuClick_page(): action: " + action + ", href: " + href);
    var thisId = getQueryParam("thisId", href);
    switch (action) {
        case 'open':
            Publish.open(thisId);
            break;
        case 'openInNewWindow':
            Publish.openInNewWindow(thisId);
            break;
        case 'newSubpage':
            Publish.newSubpage(thisId);
            break;
        case 'edit':
            Publish.edit(thisId);
            break;
        case 'delete':
            Publish.deleteItem(thisId);
            break;
        case 'cut':
            Publish.cut(thisId);
            break;
        case 'copy':
            Publish.copy(thisId);
            break;
        case 'paste':
            Publish.paste(thisId);
            break;
        case 'pasteAsShortcut':
            Publish.pasteAsShortcut(thisId);
            break;
        case 'managePrivileges':
            Publish.managePrivileges(thisId);
            break;
    }
}

/**
 * Handles selections in the context menu for menu items of type link.
 *
 * @param action The selected action e.g. 'copy'
 * @param href The value of the href-attribute for the selected item. 
 */
function handleContextMenuClick_link(action, href) {
    debug("handleContextMenuClick_link(): " + action + ", href: " + href);
    var thisId = getQueryParam("thisId", href);
    switch (action) {
        case 'open':
            Publish.open(thisId);
            break;
        case 'openInNewWindow':
            Publish.openInNewWindow(thisId);
            break;
        case 'edit':
            Publish.edit(thisId);
            break;
        case 'delete':
            Publish.deleteItem(thisId);
            break;
        case 'cut':
            Publish.cut(thisId);
            break;
        case 'copy':
            Publish.copy(thisId);
            break;
        case 'paste':
            Publish.paste(thisId);
            break;
        case 'pasteAsShortcut':
            Publish.pasteAsShortcut(thisId);
            break;
        case 'managePrivileges':
            Publish.managePrivileges(thisId);
            break;
    }
}


function openTree(elem) {
    var thisId = getQueryParam("thisId", $(elem).attr("href"));
    debug("openTree(): thisId: " + thisId);
    setFolderOpen(thisId);
    updateNavigator(getCurrentFrameLocation(), false);
}


function closeTree(elem) {
    var thisId = getQueryParam("thisId", $(elem).attr("href"));
    debug("closeTree(): thisId: " + thisId);
    setFolderClosed(thisId);
    updateNavigator(getCurrentFrameLocation(), false);
}


function setFolderOpen(id) {
    var newList = $("#NavigatorState .openFolders").html();
    debug("setFolderOpen(): newList: " + newList + ", id: " + id);

    var openList = newList.split(",");
    for (var i = 0; i < openList.length; i++) {
        var current = openList[i];
        if (id == current) {
            return;
        }
    }

    if (newList.length == 0) {
        newList = "" + id;
    } else {
        newList = newList + "," + id;
    }

    debug("setFolderOpen(): newList: " + newList);

    $("#NavigatorState .openFolders").html(newList);
}


function setFolderClosed(id) {
    var openList = $("#NavigatorState .openFolders").html().split(",");
    debug("setFolderClosed(): openList: " + openList + ", id: " + id);

    var newOpenList  = "";
    for (var i = 0; i < openList.length; i++) {
       var current = openList[i];
       if (id == current) {
          // Skip
       } else {
          if (newOpenList.length > 0) newOpenList += ",";
          newOpenList += current;
       }
    }

    debug("setFolderClosed(): newOpenList: " + newOpenList);

    $("#NavigatorState .openFolders").html(newOpenList);
}




/********************************************************************************
 * Publish tools
 *
 * These are actions associated with the publish view.
 ********************************************************************************/
$(document).ready(function(){
    bindToolButtons();
});

/**
 * Registers click event actions to each tool
 */
function bindToolButtons() {
    $("#ToolsMenu .button .newSubpage").click(function(){
        Publish.newSubpage(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .edit").click(function(){
        Publish.edit(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .delete").click(function(){
        Publish.deleteItem(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .cut").click(function(){
        Publish.cut(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .copy").click(function(){
        Publish.copy(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .paste").click(function(){
        Publish.paste(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .displayPeriod").click(function(){
        Publish.displayPeriod(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .privileges").click(function(){
        Publish.managePrivileges(getQueryParam("thisId", currentUrl));
    });
}


/**
 * Actions associated with each tool.
 */
var Publish =  {
    open : function(thisId) {
        debug("Publish.open(): thisId: " + thisId);
        updateContentFrame(getContentUrlFromAssociationId(thisId), false);
    },

    openInNewWindow : function(thisId) {
        debug("Publish.openInNewWindow(): thisId: " + thisId);
        window.open(getContentUrlFromAssociationId(thisId));
    },

    newSubpage : function(thisId) {
        debug("Publish.newSubpage(): thisId: " + thisId);
        window.location.href = "<%=Aksess.getContextPath()%>/admin/publish/AddContent.action?thisId="+thisId;
    },

    edit: function(thisId) {
        debug("Publish.editItem(): thisId: " + thisId);
        window.location.href = "<%=Aksess.getContextPath()%>/admin/publish/EditContent.action?thisId="+thisId;
    },

    deleteItem: function(thisId) {
        debug("Publish.deleteItem(): thisId: " + thisId);
    },

    cut: function(thisId) {
        debug("Publish.cut(): thisId: " + thisId);
        $(".contextMenu").enableContextMenuItems("#paste,#pasteAsShortcut");
    },

    copy: function(thisId) {
        debug("Publish.copy(): thisId: " + thisId);
        $(".contextMenu").enableContextMenuItems("#paste,#pasteAsShortcut");
    },

    paste: function(thisId) {
        debug("Publish.paste(): thisId: " + thisId);
        $(".contextMenu").disableContextMenuItems("#paste,#pasteAsShortcut");
    },

    pasteAsShortcut: function(thisId) {
        debug("Publish.pasteAsShortcut(): thisId: " + thisId);
        $(".contextMenu").disableContextMenuItems("#paste,#pasteAsShortcut");
    },

    displayPeriod: function(thisId) {
        debug("Publish.displayPeriod(): thisId: " + thisId);
    },

    managePrivileges: function(thisId) {
        debug("Publish.managePrivileges(): thisId: " + thisId);
    }
};




/********************************************************************************
 * Search
 ********************************************************************************/
 $(document).ready(function(){
     bindSearchInput();
 });

function bindSearchInput() {
    $(".search input:submit").click(function(e){
        e.preventDefault();//Preventing the form from being subitted the ordinary way.
        $(this).siblings("input:text").each(function(){
            var textInput = $(this);
            if (textInput.hasClass("query")) {
                var query = textInput.val();
                if (Search.inputValid(query)) {
                    if(textInput.hasClass("content")) {
                        Search.content(query);
                    } else if (textInput.hasClass("multimedia")) {
                        Search.multimedia(query);
                    }
                }
            }
        });
    });
}

var Search = {
    content : function(query){
        debug("Search.content(): query: " + query);
        //TODO: Implement properly. Fetch search results with ajax.
        var searchResults = $("<div/>").attr("id", "SearchResults").html("<p>You searched: " + query + "</p>").slideDown("slow");
        $("#ContentFrame").append(searchResults);
        var closeLink = $("<a>").addClass("close").attr("href", "#").html("Close");
        closeLink.click(function(){
            $(this).parent().slideUp("slow");
        });
        searchResults.append(closeLink);
    },

    multimedia : function(query) {
        debug("Search.multimedia(): query: " + query);
    },

    inputValid : function(query){
        debug("Search.inputValid(): query: " + query);
        //TODO: Validate search input
        return true;
    }
};






/********************************************************************************
 * Common functions
 ********************************************************************************/

/**
 * Returns the value of a query string parameter
 *
 * @param paramName Query parameter name
 * @param queryString The total query string
 */
function getQueryParam(paramName, queryString) {
    var val = null;
    var inx = queryString.indexOf(paramName + "=");
    if (inx != -1) {
        val = queryString.substring(inx + paramName.length + 1, queryString.length);
        if (val.indexOf("&") != -1) {
            val = val.substring(0, val.indexOf("&"));
        }
    }
    return val;
}

/**
 * Returns a uri for updating the location.href in contentmain, based on the special href-format used in the navigator.
 *
 * @param href Navigator href value
 */
function getContentUrlFromNavigatorHref(href) {
    var thisId = getQueryParam("thisId", href);
    var url = getContentUrlFromAssociationId(thisId);
    debug("getContentUrlFromNavigatorHref(): href: " + href + ", returns: " + url);
    return url;
}

/**
 * Returns the uri for a content with a given associationId
 *
 * @param associationId
 */
function getContentUrlFromAssociationId(associationId) {
    var url = "<%=Aksess.getContextPath()+ "/" + Aksess.CONTENT_REQUEST_HANDLER + "?" + AdminRequestParameters.THIS_ID + "=" %>" + associationId;
    debug("getContentUrlFromAssociationId(): associationId: " + associationId + ", returns: " + url);
    return url
}

/**
 * Prints a debug message to Firebug's debug console.
 *
 * @param msg Debug message. Convention: 'functionName(): value'
 */
function debug(msg) {
    var debugEnabled = <aksess:getconfig key="javascript.debug" default="false"/>;
    if (debugEnabled && $.browser.mozilla) {
        console.log(msg);
    }
}
