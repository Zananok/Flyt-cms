//<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%@ page import="no.kantega.publishing.admin.AdminRequestParameters" %>
//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>
//<%@ taglib prefix="kantega" uri="http://www.kantega.no/aksess/tags/commons" %>
/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var currentItemIdentifier = 0;

$(document).ready(function(){
    debug("multimedia.$(document).ready(): multimedia");
    bindMultimediaupdateEvents();
    triggerMultimediaupdateEvent();//Must be fired at startup in order to load the navigator
    bindToolButtons();
    StateHandler.init("multimediaupdate");
});

/**
 * Actions associated with each tool.
 */
var Multimedia =  {
    deleteItem: function(id) {
        debug("multimedia.Multimedia.deleteItem(): thisId: " + thisId);
        ModalWindow.open({title:'<kantega:label key="aksess.confirmdelete.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/multimedia/DeleteMultimedia.action?id=" + id,width: 450, height:250});
    },

    cut: function(thisId) {
        debug("multimedia.Multimedia.cut(): thisId: " + thisId);
        $(".contextMenu").enableContextMenuItems("#paste");
    },

    copy: function(thisId) {
        debug("multimedia.Multimedia.copy(): thisId: " + thisId);
        $(".contextMenu").enableContextMenuItems("#paste");
    },

    paste: function(thisId) {
        debug("content.Publish.paste(): thisId: " + thisId);
        $(".contextMenu").disableContextMenuItems("#paste");
    }
};

/**
 * Functions for updating the content status, i.e. the breadcrumbs, is it cross published, etc.
 */
var MultimediaStatus = {

    breadcrumbs: function (path) {
        if (path) {
            var crumbs = '<ul class="breadcrumbs">';
            for (var i=0; i<path.length; i++) {
                crumbs += "<li><a href=\"?itemIdentifier="+path[i].id+"\">"+path[i].title+"</a></li>";
            }
            crumbs += "</ul>";
            $("#Breadcrumbs").html(crumbs);
        }
    },
    disableButtons: function() {
        $("#ToolsMenu a").addClass("disabled");
    },
    enableButtons: function(buttons) {
        if (buttons) {
            for (var i=0; i < buttons.length; i++) {
                var b = buttons[i];
                $("#" + b).removeClass("disabled");
            }
        }
    }

};


/**
 * Registers click event actions to each tool
 */
function bindToolButtons() {
    bindMediaAjaxUpload();
    $("#NewFolderButton").not(".disabled").click(function() {
        createMediaFolder();
    });
    $("#DeleteFolderButton").not(".disabled").click(function() {
        Multimedia.deleteItem(currentItemIdentifier);
    });
}
/**
 * Contains the binding of all elements that are listening to the multimediaupdate event.
 * New global listeners to this event should be added here.
 */
function bindMultimediaupdateEvents() {
    //Enables the navigator to listen to contentupdate events. Called every time a contentupdate event is fired.
    $("#Navigator").bind("multimediaupdate", function(e, itemIdentifier){
        debug("multimedia.bindMultimediaupdateEvents(): "+e.type +" event received");
        if (!suppressNavigatorUpdate) {
            updateNavigator(itemIdentifier, true);
        } else {
            suppressNavigatorUpdate = false;
            debug("multimedia.bindMultimediaupdateEvents(): navigationUpdate suppressed");
        }
        updateMainPane(itemIdentifier, suppressNavigatorUpdate);
    });

    $("#Statusbar").bind("multimediaupdate", function(e, itemIdentifier){
        debug("multimedia.bindMultimediaupdateEvents(): #Statusbar has received multimediaupdate event. itemIdentifier: " + itemIdentifier);
        MultimediaStatus.disableButtons();
        $.post("${pageContext.request.contextPath}/admin/multimedia/MultimediaProperties.action", {itemIdentifier: itemIdentifier}, function(data){
            debug("multimedia.update breadcrumbs");
            MultimediaStatus.breadcrumbs(data.path);
            MultimediaStatus.enableButtons(data.enabledButtons);
        }, "json");
    });
}

/**
 * Changes the content of the main pane
 *
 * @param itemIdentifier
 * @param suppressNavigatorUpdate true/false.
 */
function updateMainPane(itemIdentifier, suppressNavigatorUpdate) {
    debug("multimedia.updateMainPane(): itemIdentifier: " + itemIdentifier + ", suppressNavigatorUpdate: " + suppressNavigatorUpdate);
    if (suppressNavigatorUpdate) {
        suppressNavigatorUpdate = true;
    }
    $("#MultimediaFolders").load(getViewFolderAction(), {itemIdentifier: itemIdentifier}, function(success){
        addMediaitemClickListeners();
        $("#MultimediaFolders img.thumbnail").lazyload({
            placeholder : "../bitmaps/blank.gif",
            container: $("#MultimediaFolders")
        });
    });
}

/**
 * Adds click listeners to the different media types and decides actions on these clicks.
 */
function addMediaitemClickListeners() {

    $("#MultimediaFolders div[id^=Media]").click(function(event){
        $media = $(this);

        if ($(event.target).hasClass("name")) {
            event.stopPropagation();
            editMediaName(this);
        }

        else if ($media.hasClass("folder")) {
            debug("multimedia.addMediaitemClickListeners(): folder click recieved");
            if (isNameEditInProgress(this)) {
                debug("multimedia.addMediaitemClickListeners(): Name edit in progress");
                updateMediaName(this);
            } else {
                var idAttr = $media.attr("id");
                currentItemIdentifier = idAttr.substring("Media".length, idAttr.length);
                triggerMultimediaupdateEvent();
            }
        }

        else if ($media.hasClass("media")) {
                debug("multimedia.addMediaitemClickListeners(): media click recieved");
                if (isNameEditInProgress(this)) {
                    debug("multimedia.addMediaitemClickListeners(): Name edit in progress");
                    updateMediaName(this);
                } else {
                    window.location.href = $media.find(".icon a").attr("href");
                }
            }
    });

}

/**
 * Sets the context (right click) menus in the navigator.
 */
function setContextMenus() {
    setContextMenu("multimedia", ['paste']);
    setContextMenu("folder", ['paste']);
}

function getNavigatorAction() {
    return "${pageContext.request.contextPath}/admin/multimedia/MultimediaNavigator.action";
}

function getViewFolderAction() {
    return "${pageContext.request.contextPath}/admin/multimedia/ViewFolder.action";
}

function getEditAction() {
    return "${pageContext.request.contextPath}/admin/multimedia/EditMultimedia.action";
}

function getItemIdentifierFromNavigatorHref(href) {
    return getQueryParam("itemIdentifier", href);
}

function onNavigatorTitleClick(elm) {
    var href = elm.attr("href");
    currentItemIdentifier = getItemIdentifierFromNavigatorHref(href);
    if(elm.hasClass("image")) {
        window.location.href = getEditAction()+"?id="+currentItemIdentifier;
    } else {
        triggerMultimediaupdateEvent();
    }
}

function triggerMultimediaupdateEvent() {
    debug("multimedia.triggerMultimediaupdateEvent(): mediaupdate event triggered");
    StateHandler.setState(currentItemIdentifier);
    $.event.trigger("multimediaupdate",currentItemIdentifier);
}

function setLayoutSpecificSizes(elementProperties) {
    debug("multimedia.setLayoutSpecificSizes()");
    $("html, body").css("overflow", "hidden");
    $("#Navigator").css('height', (elementProperties.window.height-elementProperties.top.height-5) + 'px');
    $('#Content').css('height', (elementProperties.window.height-elementProperties.top.height) + 'px');

    var $mainPane = $('#MainPane');

    $mainPane.height( (elementProperties.window.height-elementProperties.top.height) + 'px');

    if (elementProperties.navigation.width) {
        $mainPane.width( (elementProperties.window.width-elementProperties.navigation.width-elementProperties.framesplit.width) + 'px');
    } else {
        $mainPane.width( (elementProperties.window.width-elementProperties.framesplit.width-$("#SideBar").outerWidth(true)) + 'px');
    }

    var $multimediaFolders = $("#MultimediaFolders");
    if ($multimediaFolders) {
        var multimediaFoldersHeight = $mainPane.height()-parseInt($multimediaFolders.css("paddingTop"))-parseInt($multimediaFolders.css("paddingBottom"));
        $multimediaFolders.css('height',  multimediaFoldersHeight + 'px');
    }

    $('#MultimediaMain').height( (parseInt($mainPane.height())-parseInt($("#EditMultimediaButtons").outerHeight(true))) + 'px').width($mainPane.outerWidth());

}

/**
* Navigation layout specific implementation of the navigatorResizeOnResize-function.
* See navigate.jjs
*/
function navigatorResizeOnResize() {
    $.event.trigger("resize");
}

function getNavigatorParams() {
    var params = new Object();
    return params;
}

function bindMediaAjaxUpload() {
    var button = $('#UploadButton');
    new AjaxUpload(button, {
        action: 'UploadMultimedia.action',
        name: 'file',
        onSubmit : function(file, ext){
            this.setData({
                'parentId': currentItemIdentifier,
                'id' : -1
            });
            button.text('Uploading...');
            this.disable();

        },
        onComplete: function(file, response){
            button.text('New file');
            // enable upload button
            this.enable();
            displayResults(response);
        }
    });
}

function displayResults(xml) {
    var files = xml.getElementsByTagName("file");

    if (files) {
        if (files.length == 1) {
            var id = files[0].getAttribute("id");
            location.href = "EditMultimedia.action?id=" + id;
        } else {
            alert(files.length + " files uploaded");
        }
    } else {
        alert("Upload failed!");
    }
}

/**
 * Enables inline editing of the media item's name.
 *
 * @param obj - Must be the object's containing element, i.e. a div with id=Media[..]
 */
function editMediaName(obj) {
    if ($("input", obj).length == 0) {
        var $name = $(obj).find(".name");
        var value = $name.html();
        var html = '<input type="hidden" class="oldName" value="' + value + '">';
        html += '<input type="text" class="newName" maxlength="255" value="' + value + '">';
        $name.html(html);
        $("input.newName", obj)
                .keypress(function(e) {
                    if (e.which == 13 || e.which == 0) {//Enter or tab
                        updateMediaName(obj);
                    }
                }).click(function(e){
                    e.stopPropagation();
                }).focus();
    }
}

function isNameEditInProgress(obj) {
    return $("input.newName", obj).length > 0;
}

function updateMediaName(obj) {
    var $obj = $(obj);
    var idAttr = $obj.attr('id');
    var id = idAttr.substring("Media".length, idAttr.length);
    var newName = $obj.find("input.newName").val();
    var oldName = $obj.find("input.oldName").val();
    debug("multimedia.updateMediaName(): id: "+id+", newName: "+newName+", oldName:"+oldName);

    if (newName.length < 1) {
        return;
    }

    if (oldName != newName) {
        debug("multimedia.updateMediaName(): id: " + id + ", name: " + newName);
        $.post("${pageContext.request.contextPath}/admin/multimedia/UpdateMediaName.action", {itemIdentifier: id, name : newName }, function(success) {
            // Update navigation menu
            updateNavigator(currentItemIdentifier, true);            
        });
    }
    $obj.find(".name").html(newName);
}


function createMediaFolder() {
    var folderName = prompt('<kantega:label key="aksess.multimedia.foldername"/>', '');
    if (folderName != null && folderName != "") {
        debug("multimedia.createMediaFolder(): itemIdentifier: " + currentItemIdentifier + ", name: " + folderName);
        $.post("${pageContext.request.contextPath}/admin/multimedia/CreateMediaFolder.action", {itemIdentifier: currentItemIdentifier, name : folderName }, function(success) {
            triggerMultimediaupdateEvent();            
        });
    }
}
