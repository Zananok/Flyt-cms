/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%@ page import="no.kantega.publishing.admin.AdminRequestParameters" %>
//<%@ page import="no.kantega.publishing.common.data.Content" %>
//<%@ page import="no.kantega.publishing.common.data.enums.ObjectType" %>
//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>
//<%@ taglib prefix="kantega" uri="http://www.kantega.no/aksess/tags/commons" %>
//<%
    request.setAttribute("aksess_locale", Aksess.getDefaultAdminLocale());
//%>


$(document).ready(function(){
    debug("content.$(document).ready()");
    bindContentupdateEvents();
    bindFilterEvents();
    stateHandler.init("contentupdate");
});



/**
 * Contains the binding of all elements that are listening to the contentupdate event.
 * New global listeners to this event should be added here.
 */
function bindContentupdateEvents() {
    //Enables the navigator to listen to contentupdate events. Called every time a contentupdate event is fired.
    $("#Navigator").bind("contentupdate", function(e, url){
        debug("content.bindContentupdateEvents(): #Navigator has received contentupdate event. Url: " + url);

        if (!suppressNavigatorUpdate) {
            updateNavigator(url, true);
        } else {
            suppressNavigatorUpdate = false;
            debug("content.bindContentupdateEvents(): navigationUpdate suppressed");
        }
    });

    $("#Statusbar").bind("contentupdate", function(e, url){
        debug("content.bindContentupdateEvents(): #Statusbar has received contentupdate event. Url: " + url);
        ContentStatus.init();
        ContentStatus.disableButtons();
        $.post("${pageContext.request.contextPath}/admin/publish/ContentProperties.action", {url: url}, function(data){
            ContentStatus.breadcrumbs(data.path);
            ContentStatus.brokenLinks(data.links);
            ContentStatus.details(data.content);
            ContentStatus.associations(data.associations);
            ContentStatus.enableButtons(data.enabledButtons);
            ContentStatus.enableButtons(data.enabledButtons);
            ContentStatus.showApproveOrReject(data.showApproveButtons);
            ContentStatus.updateFilters(data.sites, data.userPreferences);
        }, "json");
    });

//    New listeners can be added here:
//    $([element listening to event]).bind("contentupdate", function(e, url) {
//        [perform actions]
//    });
}


function setLayoutSpecificSizes(elementProperties) {
    $("html, body").css("overflow", "hidden");
    var filteroptionsHeight = $("#Filteroptions").height();
    var statusbarHeight = $("#Statusbar").height();

    var $buttons = $('#EditContentButtons');
    var buttonsHeight = 0;
    if ($buttons && !$buttons.is(":hidden")) {
        buttonsHeight = $buttons.height();
    }
    debug("content.setLayoutSpecificSizes(): filteroptionsHeigth: "+filteroptionsHeight+", statusbarHeight"+statusbarHeight + ", buttonsHeight: " + buttonsHeight);
    $navigator = $("#Navigator");
    $navigator.css('height', (elementProperties.window.height-elementProperties.top.height-filteroptionsHeight-parseInt($navigator.css("paddingTop"))-parseInt($navigator.css("paddingBottom"))) + 'px');
    $('#Content').css('height', (elementProperties.window.height-elementProperties.top.height-statusbarHeight) + 'px');

    var $mainPane = $('#MainPane');
    $mainPane.css('height', (elementProperties.window.height-elementProperties.top.height) + 'px').css('width', (elementProperties.window.width-elementProperties.navigation.width-elementProperties.framesplit.width) + 'px');
    $mainPane.find('iframe[name=contentmain]').css('height', (elementProperties.window.height-elementProperties.top.height-statusbarHeight-buttonsHeight) + 'px');

    var $mainPaneContent = $("#MainPaneContent");
    if ($mainPaneContent) {
        var subpagesHeight = $mainPane.height()-parseInt($mainPaneContent.css("paddingTop"))-parseInt($mainPaneContent.css("paddingBottom"))-statusbarHeight-buttonsHeight;
        $mainPaneContent.css('height',  subpagesHeight + 'px');
    }

}




/**
 * Binds click/select events to the content filters, such as 'Hide expired'.
 */
function bindFilterEvents() {
    var $filterOptions = $("#Filteroptions");
    $filterOptions.find("#FilteroptionHideExpired").live('change', function(){
        var value = $(this).is(":checked");
        debug("content.bindFilterEvents(): Hide expired clicked: " + value);
        UserPreferences.setPreference(UserPreferences.keys.filter.hideExpired, value, false);
        updateNavigator(getItemIdentifierFromNavigatorHref(stateHandler.getState()), true);
    });

    var filterInfoSlider = new InfoSlider();
    var $filters = $filterOptions.find(".filters");

    $filterOptions.find(".filtersToggle").live('click', function(){
        debug("content.bindFilterEvents(): Filter clicked");
        $filters.show();
        filterInfoSlider.toggle("#Navigation", $filters, {additionalCssClasses: 'filters'});
    });

    $("#FilteroptionSort input[name=sort]").live('change', function(){
        var $this = $(this);
        debug("content.bindFilterEvents(): Sort clicked: "+ $this.val() + "="+$this.is(":checked"));
        if ($this.is(":checked")) {
            UserPreferences.setPreference(UserPreferences.keys.filter.sort, $this.val(), false);
            updateNavigator(getItemIdentifierFromNavigatorHref(stateHandler.getState()), true);
        }
    });

    var $sites = $("#FilteroptionSites input[name=sites]");
    $sites.live('change',function(){
        var hiddenSites = "";
        $filters.find("#FilteroptionSites input[name=sites]").each(function(){
            var $site = $(this);
            if (!$site.is(":checked")) {
                hiddenSites += $site.val();

            }
        });

        UserPreferences.setPreference(UserPreferences.keys.filter.sites, hiddenSites, false);
        updateNavigator(getItemIdentifierFromNavigatorHref(stateHandler.getState()), true);
    });

    $("#hideexpiredFilteroptionSites_all").live('click',function(e){
        e.preventDefault();
        $("#Filteroptions .filters input[name=sites]").each(function(){
            $(this).attr("checked", "checked");
        });
        UserPreferences.setPreference(UserPreferences.keys.filter.sites, '', false);
        updateNavigator(getItemIdentifierFromNavigatorHref(stateHandler.getState()), true);
    });
}

/**
 * Fires an content update event for the given url
 * @url - Current url.
 */
function triggerContentUpdateEvent(url) {
    debug("content.triggerContentUpdateEvent(): url: " + url);
    notifyContentUpdate(url);
    //Event triggering is delegated to the state handler.
    stateHandler.setState(url);
}

function navigatorResizeOnStart() {
    debug("content.navigatorResizeOnStart(): Adding overlay");
    var height = $("#MainPane").height();
    var width = $("#MainPane").width();
    var contentoverlay = $("<div/>").css("position", "absolute").css("height", height + "px").css("width", width + "px").css("background", "#ffffff").css("opacity", "0").attr("id", "Contentoverlay");
    $("#MainPane iframe[name=contentmain]").before(contentoverlay);
}

function navigatorResizeOnStop() {
    debug("content.navigatorResizeOnStop(): Removing overlay");
    $.event.trigger("resize");
    $("#Contentoverlay").remove();
}

function navigatorResizeOnResize() {
    //TODO: Verify the performance of this in all browsers.
    $.event.trigger("resize");
}



/**
 * Sets the context (right click) menus in the navigator.
 */
function setContextMenus() {
    setContextMenu("page", ['paste', 'pasteAsShortcut']);
    setContextMenu("link", ['paste', 'pasteAsShortcut']);
}

function getNavigatorAction() {
    return "${pageContext.request.contextPath}/admin/publish/ContentNavigator.action";
}

/**
 * Handles selections in the context menu for menu items of type page.
 *
 * @param action The selected action e.g. 'copy'
 * @param href The value of the href-attribute for the selected item.
 */
function handleContextMenuClick_page(action, href) {
    debug("content.handleContextMenuClick_page(): action: " + action + ", href: " + href);
    var thisId = getQueryParam("thisId", href);
    switch (action) {
        case 'open':
            Publish.open(thisId);
            break;
        case 'openInNewWindow':
            Publish.openInNewWindow(thisId);
            break;
        case 'newSubpage':
            Publish.newSubpage(thisId);
            break;
        case 'edit':
            Publish.edit(thisId);
            break;
        case 'delete':
            Publish.deleteItem(thisId);
            break;
        case 'cut':
            Publish.cut(thisId);
            break;
        case 'copy':
            Publish.copy(thisId);
            break;
        case 'paste':
            Publish.paste(thisId);
            break;
        case 'pasteAsShortcut':
            Publish.pasteAsShortcut(thisId);
            break;
        case 'managePrivileges':
            Publish.managePrivileges(thisId);
            break;
    }
}

/**
 * Handles selections in the context menu for menu items of type link.
 *
 * @param action The selected action e.g. 'copy'
 * @param href The value of the href-attribute for the selected item.
 */
function handleContextMenuClick_link(action, href) {
    debug("content.handleContextMenuClick_link(): " + action + ", href: " + href);
    var thisId = getQueryParam("thisId", href);
    switch (action) {
        case 'open':
            Publish.open(thisId);
            break;
        case 'openInNewWindow':
            Publish.openInNewWindow(thisId);
            break;
        case 'edit':
            Publish.edit(thisId);
            break;
        case 'delete':
            Publish.deleteItem(thisId);
            break;
        case 'cut':
            Publish.cut(thisId);
            break;
        case 'copy':
            Publish.copy(thisId);
            break;
        case 'paste':
            Publish.paste(thisId);
            break;
        case 'pasteAsShortcut':
            Publish.pasteAsShortcut(thisId);
            break;
        case 'managePrivileges':
            Publish.managePrivileges(thisId);
            break;
    }
}


/********************************************************************************
 * Publish tools
 *
 * These are actions associated with the publish view.
 ********************************************************************************/
$(document).ready(function(){
    bindToolButtons();
});

/**
 * Registers click event actions to each tool
 */
function bindToolButtons() {
    // TODO: This will only work when page id is in URL, must replace with current id from ContentPropertiesAction(?)
    $("#ToolsMenu .button .newSubpage").click(function(){
        Publish.newSubpage(getQueryParam("thisId", stateHandler.getState()));
    });
    $("#ToolsMenu .button .delete").click(function(){
        Publish.deleteItem(getQueryParam("thisId", stateHandler.getState()));
    });
    $("#ToolsMenu .button .cut").click(function(){
        Publish.cut(getQueryParam("thisId", stateHandler.getState()));
    });
    $("#ToolsMenu .button .copy").click(function(){
        Publish.copy(getQueryParam("thisId", stateHandler.getState()));
    });
    $("#ToolsMenu .button .paste").click(function(){
        Publish.paste(getQueryParam("thisId", stateHandler.getState()));
    });
    $("#ToolsMenu .button .displayPeriod").click(function(){
        Publish.displayPeriod(getQueryParam("thisId", stateHandler.getState()));
    });
    $("#ToolsMenu .button .privileges").click(function(){
        Publish.managePrivileges(getQueryParam("thisId", stateHandler.getState()));
    });
}


/**
 * Actions associated with each tool.
 */
var Publish =  {
    open : function(thisId) {
        debug("content.Publish.open(): thisId: " + thisId);
        updateMainPane(getContentUrlFromAssociationId(thisId), false);
    },

    openInNewWindow : function(thisId) {
        debug("content.Publish.openInNewWindow(): thisId: " + thisId);
        window.open(getContentUrlFromAssociationId(thisId));
    },

    newSubpage : function(thisId) {
        debug("content.Publish.newSubpage(): thisId: " + thisId);
        window.location.href = "${pageContext.request.contextPath}/admin/publish/AddContent.action?thisId="+thisId;
    },

    edit: function(thisId) {
        debug("content.Publish.editItem(): thisId: " + thisId);
        window.location.href = "${pageContext.request.contextPath}/admin/publish/EditContent.action?thisId="+thisId;
    },

    deleteItem: function(thisId) {
        debug("content.Publish.deleteItem(): thisId: " + thisId);
        ModalWindow.open({title:'<kantega:label key="aksess.confirmdelete.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/DeleteAssociation.action?id=" + thisId,width: 450, height:250});
    },

    cut: function(thisId) {
        debug("content.Publish.cut(): thisId: " + thisId);
        ContentClipboardHandler.cut(thisId);
        $(".contextMenu").enableContextMenuItems("#paste,#pasteAsShortcut");
    },

    copy: function(thisId) {
        debug("content.Publish.copy(): thisId: " + thisId);
        ContentClipboardHandler.copy(thisId);
        $(".contextMenu").enableContextMenuItems("#paste,#pasteAsShortcut");
    },

    paste: function(thisId) {
        debug("content.Publish.paste(): thisId: " + thisId);
        $(".contextMenu").disableContextMenuItems("#paste,#pasteAsShortcut");
        ModalWindow.open({title:'<kantega:label key="aksess.copypaste.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/ConfirmCopyPaste.action?newParentId=" + thisId,width: 350, height:220});
    },

    pasteAsShortcut: function(thisId) {
        debug("content.Publish.pasteAsShortcut(): thisId: " + thisId);
        $(".contextMenu").disableContextMenuItems("#paste,#pasteAsShortcut");
        ModalWindow.open({title:'<kantega:label key="aksess.copypaste.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/ConfirmCopyPaste.action?pasteShortcut=true&amp;newParentId=" + thisId,width: 350, height:220});
    },

    displayPeriod: function(thisId) {
        debug("content.Publish.displayPeriod(): thisId: " + thisId);
        ModalWindow.open({title:'<kantega:label key="aksess.publishinfo.period"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/ViewDisplayPeriod.action?id=" + thisId,width: 350, height:220});
    },

    managePrivileges: function(thisId) {
        debug("content.Publish.managePrivileges(): thisId: " + thisId);
        ModalWindow.open({title:'<kantega:label key="aksess.editpermissions.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/security/EditPermissions.action?id=" + thisId + "&type=<%=ObjectType.ASSOCIATION%>",width: 650, height:560});
    },

    approve: function(thisId) {
        $.post("${pageContext.request.contextPath}/admin/publish/ApproveOrReject.action", {approve:true, id:thisId});
        ContentStatus.showApproveOrReject(false);
    },

    reject: function(thisId) {
        ModalWindow.open({title:'<kantega:label key="aksess.reject.title"/>', iframe:true, href: "${pageContext.request.contextPath}/admin/publish/popups/RejectNote.action?id=" + thisId,width: 350, height:200});
    }
};

/**
 * Functions for updating the content status, i.e. the breadcrumbs, is it cross published, etc.
 */
var ContentStatus = {

    init : function() {
        $("#Statusbar .statusDetails").remove();
        $("#Statusbar .crossPublish").hide();
        $("#Statusbar .brokenLink").hide();
    },

    breadcrumbs: function (path) {
        if (path) {
            var crumbs = '<ul class="breadcrumbs">';
            for (var i=0; i<path.length; i++) {
                crumbs += "<li><a href=\"?thisId="+path[i].id+"\">"+path[i].title+"</a></li>";
            }
            crumbs += "</ul>";
            $("#Breadcrumbs").html(crumbs);
        }
    },

    brokenLinks: function (links) {
        if (links && links.length > 0) {
            debug("content.ContentStatus.brokenLinks(): binding links icon to click. Number of links: " +links.length);
            var brokenLinksInfoSlider = new InfoSlider();
            $("#Statusbar .brokenLink").unbind('click').bind('click', function(){
                debug("content.ContentStatus.brokenLinks(): click");
                var details = '<table>' +
                            '   <thead>' +
                            '       <tr>' +
                            '           <th class="field"><kantega:label key="aksess.linkcheck.field"/></th>' +
                            '           <th class="url"><kantega:label key="aksess.linkcheck.url"/></th>' +
                            '           <th class="status"><kantega:label key="aksess.linkcheck.status"/></th>' +
                            '           <th class="lastChecked"><kantega:label key="aksess.linkcheck.lastchecked"/></th>' +
                            '           <th class="timesChecked"><kantega:label key="aksess.linkcheck.timeschecked"/></th>' +
                            '       </tr>' +
                            '</thead>' +
                            '<tbody>';
                for (var i = 0; i < links.length; i++) {
                    details += '<tr>' +
                             '  <td>'+links[i].attributeName+'</td>' +
                             '  <td>'+links[i].url+'</td>' +
                             '  <td>'+links[i].status+'</td>' +
                             '  <td>'+links[i].lastChecked+'</td>' +
                             '  <td>'+links[i].timesChecked+'</td>' +
                             '</tr>';
                }
                details +='   </tbody>' +
                        '</table>';
                brokenLinksInfoSlider.toggle("#MainPane",details, {additionalCssClasses: 'brokenlinks'});
            }).show();
        }
    },


    details: function(content) {
        if (content) {
            debug("content.ContentStatus.details(): binding details icon to click");
            var detailsInfoSlider = new InfoSlider();
            $("#Statusbar .details").unbind('click').bind('click', function(){
                debug("content.ContentStatus.details(): click");
                var details = "<h3>Details</h3><ul>";
                details += '<li><span class="label"><kantega:label key="aksess.contentproperty.title"/>:</span>&nbsp;'+content.title+'</li>';
                if (content.alias) {
                    details += '<li><span class="label"><kantega:label key="aksess.publishinfo.alias"/>:</span>&nbsp;'+content.alias+'</li>';
                }
                if (content.lastModified) {
                    details += '<li><span class="label"><kantega:label key="aksess.contentproperty.lastmodified"/>:</span>&nbsp;'+content.lastModified+'</li>';
                }
                if (content.changeFromDate) {
                    details += '<li><span class="label"><kantega:label key="aksess.contentproperty.changefrom"/>:</span>&nbsp;'+content.changeFromDate+'</li>';
                }
                if (content.expireDate) {
                    details += '<li><span class="label"><kantega:label key="aksess.contentproperty.expiredate"/>:</span>&nbsp;'+content.changeFromDate+'</li>';
                }

                details +="</ul>";
                detailsInfoSlider.toggle("#MainPane",details, {additionalCssClasses: 'details'});
            }).show();
        }
    },


    associations: function (associations) {
        if (associations && associations.length > 1) {
            debug("content.ContentStatus.associations(): Number of associations: "+associations.length);
            var associationsInfoSlider = new InfoSlider();
            $("#Statusbar .crossPublish").unbind('click').bind('click', function(){
                debug("content.ContentStatus.details(): click");
                var details = '<h3>Associations</h3>';
                for (var i = 0; i < associations.length; i++) {
                    details += '<ul class="breadcrumbs">';
                    for (var j = 0; j<associations[i].length; j++) {
                        details += '<li><a href="?thisId='+associations[i][j].id+'">' + associations[i][j].title + '</a></li>';
                    }
                    details += '</ul><div class="clearing"></div>';
                }
                associationsInfoSlider.toggle("#MainPane",details, {additionalCssClasses: 'associations'});
            }).show();
        }
    },


    disableButtons: function() {
        $("#ToolsMenu a").addClass("disabled");
    },


    enableButtons: function(buttons) {
        if (buttons) {
            for (var i=0; i < buttons.length; i++) {
                var b = buttons[i];
                $("#" + b).removeClass("disabled");
            }
        }
    },


    showApproveOrReject: function(showButtons) {
        debug("ContentStatus.showApproveOrReject: " + showButtons);
        var $approveButton = $("#EditContentButtons .approve");
        if ($approveButton.size() > 0) {
            if (showButtons) {
                $("#EditContentButtons").show();
            } else {
                $("#EditContentButtons").hide();
            }
            $.event.trigger("resize");
        }
    },

    /**
     * Populates all content filters and sets the user's prefered values.
     * @param sites - List of all available sites.
     */
    updateFilters: function(sites, userPreferences){

        var hiddenSites = [];
        var hideExpired = false;
        var sort = 'priority';

        if (userPreferences && userPreferences.length >0) {
            for (var i = 0; i < userPreferences.length; i++) {
                if (userPreferences[i].key == UserPreferences.keys.filter.sites) {
                    hiddenSites = userPreferences[i].value.split(",");
                }
                else if (userPreferences[i].key == UserPreferences.keys.filter.hideExpired) {
                    hideExpired = (userPreferences[i].value == 'true');
                }
                else if (userPreferences[i].key == UserPreferences.keys.filter.sort) {
                    sort = userPreferences[i].value;
                }
            }
        }

        //Set sort order
        $("#FilteroptionSort input[name=sort]").each(function(){
            var $this = $(this);
            if ($this.val() == sort) {
                $this.attr("checked", "checked");
            }
        });

        //Set the site filter
        if (sites && sites.length > 0) {
            debug("content.ContentStatus.updateSiteFilter(): Number of sites: " + sites.length);
            var $sitesFilterOptionsContainser = $("#FilteroptionSites .options");
            var siteOptions = '';
            //Print all sites
            for(i = 0; i < sites.length; i++) {
                siteOptions +=
                     '<div class="row">' +
                     '  <input type="checkbox" class="checkbox" name="sites" value="'+sites[i].id+'" id="FilteroptionSites_'+sites[i].id+'"';
                var isHidden = false;
                //Check if the user has chosen to hide the site.
                for (var j=0; j<hiddenSites.length; j++) {
                    if (hiddenSites[j] == sites[i].id) {
                        isHidden = true;
                    }
                }
                if (!isHidden) {
                    siteOptions += ' checked="checked"';
                }
                siteOptions +=
                     '><label class="checkbox" for="FilteroptionSites_'+sites[i].id+'">'+sites[i].name+'</label>' +
                     '  <div class="clearing"></div>' +
                     '</div>';
            }
            $sitesFilterOptionsContainser.html(siteOptions);
        }

        //Has the user chosen to hide expired elements?
        if (hideExpired) {
            $("#FilteroptionHideExpired").attr("checked", "checked");
        }

    }

};


/**
 * Handles opening and closing of the support information container,
 * typically located below the status bar and the content filters.
 *
 * This slider has the css-class "infoslider".
 */
function InfoSlider() {

    var sliderOptions = {
        speed: 300,
        resizable: false,
        additionalCssClasses: ''
    };

    var id = new Date().valueOf();

    /**
     * Opens the infoslider if it's hidden.
     * If the infoslider is open and toogle() is called by the same element as the one opening it, the slider is closed.
     * If the infoslider is open and toogle() is called by a different element than the one opening it, the content is replaced
     * and the slider is kept open.
     *
     * @param location - Which sider to open. This must be an element selector within with an infoslider is located.
     * Example: If there exists an infoslider within a div with id "Navigator", this parameter will be "#Navigator".
     * @param content - The content to display in the info slider.
     * @param options - Additional options for the infoslider. See property sliderOptions for available options.
     */
    this.toggle = function(location, content, options) {
        debug("content.InfoSlider.toggle(): location: " + location + ", content: " + content + ", id: " + id);
        $.extend(sliderOptions, options);
        var $infoslider = $(location).find(".infoslider");

        //The slider is physically closed. Set own content and open it.
        if ($infoslider.is(":hidden")) {
            setContent($infoslider, content);
            if (sliderOptions.resizable) {
                makeResizable($infoslider);
            }
            $infoslider.slideDown(sliderOptions.speed);
        }

        // The slider is physically open, check who opened it.
        else {
            //Opened by self. Closing the slider
            if (isOpenedBySelf($infoslider)) {
                hide(location);
            }
            //Somone else has already opened it. Keep it open and replace the content.
            else {
                setContent($infoslider, content);

                if (sliderOptions.resizable) {
                    makeResizable($infoslider);
                }

            }
        }

        //Apply closer
        $('<div class="close"><span><kantega:label key="aksess.infoslider.close"/></span></div>').appendTo($infoslider).click(function(){
            hide(location);
        });
    };

    /**
     * Hides the infoslider in the given location.
     *
     * @param location
     */
    this.hide = function(location) {
        $(location).find(".infoslider").html("").slideUp(sliderOptions.speed);
    };
    //Expose hide() to local functions
    var hide = this.hide;


    var setContent = function(infoslider, content) {
        $(infoslider)
                .attr("id", id)
                .removeClass()
                .addClass("infoslider")
                .addClass(sliderOptions.additionalCssClasses)
                .css("height", "auto")
                .html("")
                .append(content)
                .wrapInner('<div class="slidercontent"/>');
    };

    /**
     * Makes the given infoslider resizable.
     *
     * @param infoslider
     */
    var makeResizable = function(infoslider) {

        var $infoslider = $(infoslider);
        debug("content.InfoSlider.makeResizable(): Making infoslider resizable. Id: " + $infoslider.attr("id"));

        $infoslider.resizable({
            handles: 's',
            start: function(){
                if (typeof navigatorResizeOnStart == 'function') {
                    var $iframe = $(this).find("iframe");
                    //Apply an overlay to the infoslider if it contains an iframe. Iframes mess up the resizing...
                    if ($iframe.size() > 0) {
                        debug("InfoSlider.toggle(): Resize start. Iframe found. Adding overlay");
                        var height = $infoslider.height();
                        var width = $infoslider.width();
                        var overlay = $("<div/>").css("position", "absolute").css("height", height + "px").css("width", width + "px").css("background", "#ffffff").css("opacity", "0").attr("id", "InforSlider_overlay");
                        $iframe.before(overlay);
                    }
                    navigatorResizeOnStart();
                }
            },
            stop: function() {
                if (typeof navigatorResizeOnStop == 'function') {
                    $("#InforSlider_overlay").remove();
                    navigatorResizeOnStop();
                }
            },
            resize: function() {
                var $iframe = $(this).find("iframe");
                if ($iframe.size() > 0) {
                    $iframe.height($infoslider.height());
                }
                if (typeof navigatorResizeOnResize == 'function') {
                    navigatorResizeOnResize();
                }
            }
        });
    };


    /**
     * Returns true if the infoslider is opened by the current opener.
     * @param infoslider
     */
    var isOpenedBySelf = function(infoslider){
        return $(infoslider).attr("id") == id;    
    };
};

/**
 * Returns the location object for the contentmain iframe.
 */
function  getCurrentLocation() {
    return document.getElementById("Contentmain").contentWindow.document.location;
}

/**
 * Returns a uri for updating the location.href in contentmain, based on the special href-format used in the navigator.
 *
 * @param href Navigator href value
 */
function getItemIdentifierFromNavigatorHref(href) {
    var thisId = getQueryParam("thisId", href);
    //var url = getContentUrlFromAssociationId(thisId);
    debug("content.getItemIdentifierFromNavigatorHref(): href: " + href + ", returns: " + thisId);
    return thisId;
}

/**
 * Returns the uri for a content with a given associationId
 *
 * @param associationId
 */
function getContentUrlFromAssociationId(associationId) {
    var url = " ${pageContext.request.contextPath}<%="/" + Aksess.CONTENT_REQUEST_HANDLER + "?" + AdminRequestParameters.THIS_ID + "=" %>" + associationId;
    debug("content.getContentUrlFromAssociationId(): associationId: " + associationId + ", returns: " + url);
    return url;
}

function getNavigatorParams() {
    var params = new Object();
    if($("#NavigatorState .sort").html() != null) {
        params.sort = $("#NavigatorState .sort").html();
    }
    params.showExpired = !$("#FilteroptionHideExpired").is(":checked");
    return params;
}