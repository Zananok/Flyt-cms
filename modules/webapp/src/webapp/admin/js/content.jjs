/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%@ page import="no.kantega.publishing.admin.AdminRequestParameters" %>
//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>


var currentUrl = "";

$(document).ready(function(){
    debug("content.$(document).ready()");
    bindContentupdateEvents();
    setOpenElementFromSession();
    bindFilterEvents();
});



/**
 * Contains the binding of all elements that are listening to the contentupdate event.
 * New global listeners to this event should be added here.
 */
function bindContentupdateEvents() {
    //Enables the navigator to listen to contentupdate events. Called every time a contentupdate event is fired.
    $("#Navigator").bind("contentupdate", function(e, url){
        debug("content.bindContentupdateEvents(): #Navigator has received contentupdate event. Url: " + url);
        if(url) {
            currentUrl = url;
        }
        if (!suppressNavigatorUpdate) {
            updateNavigator(currentUrl, true);
        } else {
            suppressNavigatorUpdate = false;
            debug("content.bindContentupdateEvents(): navigationUpdate suppressed");
        }
    });

    $("#Statusbar").bind("contentupdate", function(e, url){
        debug("content.bindContentupdateEvents(): #Statusbar has received contentupdate event. Url: " + url);
        if(url) {
            currentUrl = url;
        }
        $.post("${pageContext.request.contextPath}/admin/publish/ContentProperties.action", {url: currentUrl}, function(data){
            ContentStatus.breadcrumbs(data.path);
            ContentStatus.brokenLinks(data.links);
            ContentStatus.associations(data.associations);
        }, "json");
    });

//    New listeners can be added here:
//    $([element listening to event]).bind("contentupdate", function(e, url) {
//        [perform actions]
//    });
}



/**
 * Retrieves the last recently viewed content element from the session and sets this as current element
 */
function setOpenElementFromSession() {
    ContentStateHandler.getCurrentContent(function(associationId){
        updateNavigator(getContentUrlFromAssociationId(associationId), true);
    });
}

/**
 * Binds click/select events to the content filters, such as 'Hide expired'.
 */
function bindFilterEvents() {
    var filterOptions = $("#Filteroptions");
    filterOptions.find("#FilteroptionHideExpired").live('click', function(){
        var value = $(this).is(":checked");
        debug("content.bindFilterEvents(): Hide expired clicked: " + value);
        UserPreferences.setPreference({key:'hideExpired', value:value, permanent:false}, new function(){
            
        });
        $.event.trigger("contentupdate");
    });

    filterOptions.find(".filter").live('click', function(){
        debug("content.bindFilterEvents(): Filter clicked");
    });
}


function navigatorResizeOnStart() {
    var height = $("#MainPane").height();
    var width = $("#MainPane").width();
    var contentoverlay = $("<div/>").css("position", "absolute").css("height", height + "px").css("width", width + "px").css("background", "#ffffff").css("opacity", "0").attr("id", "Contentoverlay");
    $("#MainPane iframe").before(contentoverlay);
}

function navigatorResizeOnStop() {
    debug("content.makeNavigatorResizable(): onStop");
    $.event.trigger("resize");
    $("#Contentoverlay").remove();
}

function navigatorResizeOnResize() {
    var navigationWidth = $("#Navigation").width();
    var framesplitWidth = $("#Framesplit").width();
    $("#Contentoverlay, #ContentFrame iframe").css("width", ($(window).width()-navigationWidth-framesplitWidth-2) + 'px');
}



/**
 * Sets the context (right click) menus in the navigator.
 */
function setContextMenus() {
    setContextMenu("page", ['paste', 'pasteAsShortcut']);
    setContextMenu("link", ['paste', 'pasteAsShortcut']);
}

function getNavigatorAction() {
    return "${pageContext.request.contextPath}/admin/publish/ContentNavigator.action";
}

/**
 * Handles selections in the context menu for menu items of type page.
 *
 * @param action The selected action e.g. 'copy'
 * @param href The value of the href-attribute for the selected item.
 */
function handleContextMenuClick_page(action, href) {
    debug("content.handleContextMenuClick_page(): action: " + action + ", href: " + href);
    var thisId = getQueryParam("thisId", href);
    switch (action) {
        case 'open':
            Publish.open(thisId);
            break;
        case 'openInNewWindow':
            Publish.openInNewWindow(thisId);
            break;
        case 'newSubpage':
            Publish.newSubpage(thisId);
            break;
        case 'edit':
            Publish.edit(thisId);
            break;
        case 'delete':
            Publish.deleteItem(thisId);
            break;
        case 'cut':
            Publish.cut(thisId);
            break;
        case 'copy':
            Publish.copy(thisId);
            break;
        case 'paste':
            Publish.paste(thisId);
            break;
        case 'pasteAsShortcut':
            Publish.pasteAsShortcut(thisId);
            break;
        case 'managePrivileges':
            Publish.managePrivileges(thisId);
            break;
    }
}

/**
 * Handles selections in the context menu for menu items of type link.
 *
 * @param action The selected action e.g. 'copy'
 * @param href The value of the href-attribute for the selected item.
 */
function handleContextMenuClick_link(action, href) {
    debug("content.handleContextMenuClick_link(): " + action + ", href: " + href);
    var thisId = getQueryParam("thisId", href);
    switch (action) {
        case 'open':
            Publish.open(thisId);
            break;
        case 'openInNewWindow':
            Publish.openInNewWindow(thisId);
            break;
        case 'edit':
            Publish.edit(thisId);
            break;
        case 'delete':
            Publish.deleteItem(thisId);
            break;
        case 'cut':
            Publish.cut(thisId);
            break;
        case 'copy':
            Publish.copy(thisId);
            break;
        case 'paste':
            Publish.paste(thisId);
            break;
        case 'pasteAsShortcut':
            Publish.pasteAsShortcut(thisId);
            break;
        case 'managePrivileges':
            Publish.managePrivileges(thisId);
            break;
    }
}


/********************************************************************************
 * Publish tools
 *
 * These are actions associated with the publish view.
 ********************************************************************************/
$(document).ready(function(){
    bindToolButtons();
});

/**
 * Registers click event actions to each tool
 */
function bindToolButtons() {
    $("#ToolsMenu .button .newSubpage").click(function(){
        Publish.newSubpage(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .edit").click(function(){
        Publish.edit(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .delete").click(function(){
        Publish.deleteItem(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .cut").click(function(){
        Publish.cut(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .copy").click(function(){
        Publish.copy(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .paste").click(function(){
        Publish.paste(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .displayPeriod").click(function(){
        Publish.displayPeriod(getQueryParam("thisId", currentUrl));
    });
    $("#ToolsMenu .button .privileges").click(function(){
        Publish.managePrivileges(getQueryParam("thisId", currentUrl));
    });
}


/**
 * Actions associated with each tool.
 */
var Publish =  {
    open : function(thisId) {
        debug("content.Publish.open(): thisId: " + thisId);
        updateMainPane(getContentUrlFromAssociationId(thisId), false);
    },

    openInNewWindow : function(thisId) {
        debug("content.Publish.openInNewWindow(): thisId: " + thisId);
        window.open(getContentUrlFromAssociationId(thisId));
    },

    newSubpage : function(thisId) {
        debug("content.Publish.newSubpage(): thisId: " + thisId);
        window.location.href = "${pageContext.request.contextPath}/admin/publish/AddContent.action?thisId="+thisId;
    },

    edit: function(thisId) {
        debug("content.Publish.editItem(): thisId: " + thisId);
        window.location.href = "${pageContext.request.contextPath}/admin/publish/EditContent.action?thisId="+thisId;
    },

    deleteItem: function(thisId) {
        debug("content.Publish.deleteItem(): thisId: " + thisId);
    },

    cut: function(thisId) {
        debug("content.Publish.cut(): thisId: " + thisId);
        $(".contextMenu").enableContextMenuItems("#paste,#pasteAsShortcut");
    },

    copy: function(thisId) {
        debug("content.Publish.copy(): thisId: " + thisId);
        $(".contextMenu").enableContextMenuItems("#paste,#pasteAsShortcut");
    },

    paste: function(thisId) {
        debug("content.Publish.paste(): thisId: " + thisId);
        $(".contextMenu").disableContextMenuItems("#paste,#pasteAsShortcut");
    },

    pasteAsShortcut: function(thisId) {
        debug("content.Publish.pasteAsShortcut(): thisId: " + thisId);
        $(".contextMenu").disableContextMenuItems("#paste,#pasteAsShortcut");
    },

    displayPeriod: function(thisId) {
        debug("content.Publish.displayPeriod(): thisId: " + thisId);
    },

    managePrivileges: function(thisId) {
        debug("content.Publish.managePrivileges(): thisId: " + thisId);
    }
};

/**
 * Functions for updating the content status, i.e. the breadcrumbs, is it cross published, etc.
 */
var ContentStatus = {

    breadcrumbs: function (path) {
        if (path) {
            var crumbs = "<ul>";
            for (var i=0; i<path.length; i++) {
                crumbs += "<li><a href=\"?thisId="+path[i].id+"\">"+path[i].title+"</a></li>";
            }
            crumbs += "</ul>";
            $("#Breadcrumbs").html(crumbs);
        }
    },

    brokenLinks: function (links) {
        if (links && links.length > 0) {
            $("#Statusbar .brokenLink").show();
        }
    },
    associations: function (associations) {
        if (associations && associations.length > 1) {
            $("#Statusbar .crossPublished").show();
        }
    }
};


/**
 * Returns the location object for the contentmain iframe.
 */
function  getCurrentLocation() {
    return document.getElementById("Contentmain").contentWindow.document.location;
}

/**
 * Returns a uri for updating the location.href in contentmain, based on the special href-format used in the navigator.
 *
 * @param href Navigator href value
 */
function getItemIdentifierFromNavigatorHref(href) {
    var thisId = getQueryParam("thisId", href);
    //var url = getContentUrlFromAssociationId(thisId);
    debug("content.getItemIdentifierFromNavigatorHref(): href: " + href + ", returns: " + thisId);
    return thisId;
}

/**
 * Returns the uri for a content with a given associationId
 *
 * @param associationId
 */
function getContentUrlFromAssociationId(associationId) {
    var url = " ${pageContext.request.contextPath}<%="/" + Aksess.CONTENT_REQUEST_HANDLER + "?" + AdminRequestParameters.THIS_ID + "=" %>" + associationId;
    debug("content.getContentUrlFromAssociationId(): associationId: " + associationId + ", returns: " + url);
    return url;
}

function getNavigatorParams() {
    var params = new Object();
    if($("#NavigatorState .sort").html() != null) {
        params.sort = $("#NavigatorState .sort").html();
    }
    params.showExpired = !$("#FilteroptionHideExpired").is(":checked");
    return params;
}