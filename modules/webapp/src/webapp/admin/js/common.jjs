//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>
//<%@ taglib prefix="kantega" uri="http://www.kantega.no/aksess/tags/commons" %>
//<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%@ page import="no.kantega.publishing.admin.AdminRequestParameters" %>
//<%
request.setAttribute("aksess_locale", Aksess.getDefaultAdminLocale());
//%>

/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/********************************************************************************
 * Common OpenAksess functions. Declares the global namespace for all objects.
 *
 * Used both in standard admin context and by MiniAksess.
 ********************************************************************************/

var openaksess =  {
    // All Javascript objects should use this namespace
};

openaksess.common = {
    columnize : function() {
        var columnized = $(".columnized");
        openaksess.common.debug("openaksess.common(): Number of elements found to columnize: " + columnized.size());
        if (columnized.size() > 0) {
            var columncount = 1;
            var classes = columnized.attr("class").split(" ");
            for (var i in classes) {
                var c = classes[i];
                if (c.indexOf("columnCount") > -1) {
                    columncount = parseInt(c.substring("columnCount".length, c.length));
                }
            }
            openaksess.common.debug("openaksess.common(): Column count: " + columncount);
            columnized.makeacolumnlists({cols:columncount,colWidth:0,equalHeight:false,startN:1});
        }
    },

    /**
     * Returns the value of a query string parameter
     *
     * @param paramName Query parameter name
     * @param queryString The total query string
     */
    getQueryParam : function(paramName, queryString) {
        var val = null;
        var inx = queryString.indexOf(paramName + "=");
        if (inx != -1) {
            val = queryString.substring(inx + paramName.length + 1, queryString.length);
            if (val.indexOf("&") != -1) {
                val = val.substring(0, val.indexOf("&"));
            }
        }
        return val;
    },

    /**
     * Returns the uri for a content with a given associationId
     *
     * @param associationId
     */
    getContentUrlFromAssociationId : function(associationId) {
        var url = " ${pageContext.request.contextPath}<%="/" + Aksess.CONTENT_REQUEST_HANDLER + "?" + AdminRequestParameters.THIS_ID + "=" %>" + associationId;
        openaksess.common.debug("openaksess.common.getContentUrlFromAssociationId(): associationId: " + associationId + ", returns: " + url);
        return url;
    },

    /**
     * Prints a debug message to Firebug's debug console.
     *
     * @param msg Debug message. Convention: 'functionName(): value'
     */
    debug : function (msg) {
        var debugEnabled = <aksess:getconfig key="javascript.debug" default="false"/>;
        if (debugEnabled && $.browser.mozilla && typeof console != 'undefined') {
            var now = new Date();
            console.log(now.getHours()+":"+now.getMinutes()+":"+now.getSeconds()+now.getMilliseconds()+ " - " + msg);
        }
    }


};



/**
 * Responsible for drawing pop-ups and modals.
 */
var ModalWindow = {

    $content: '',

    config: {
        title: 'OpenAksess',
        titlebar: true,
        resizable: true,
        modal: true,
        iframe: false,
        closeOnEscape: true,
        height: 400,
        width: 600,
        horizontalPadding: 0,
        verticalPadding: 0,
        open: function(){
            $.event.trigger("resize");
        },
        autoResize: true,
        autoOpen: true,
        overlay: {
            opacity: 0.2,
            background: "black"
        }
    },


    /**
     * Opens a modal with the desired properties.
     *
     * @param config
     */
    open: function(config){
        openaksess.common.debug("common.ModalWindow.open(): config: " + config);

        if (config && typeof(config) == 'object') {
            openaksess.common.debug("common.ModalWindow.open(): Extending default config with user supplied config.");
            $.extend(ModalWindow.config, config);
        }

        if (!ModalWindow.config.position) {
            ModalWindow.config.position = [(($(window).width()-ModalWindow.config.width)/2),(($(window).height()-ModalWindow.config.height)/2)];
        }


        if (ModalWindow.config.iframe) {
            $content = $('<iframe id="externalSite" src="' + ModalWindow.config.href + '" />');
        } else {
            $content = $("<div/>").load(ModalWindow.config.href);
        }

        openaksess.common.debug("common.ModalWindow.open(): Opening modal window.");

        $content.dialog(ModalWindow.config);

        if (ModalWindow.config.iframe) {
            $content.width(ModalWindow.config.width - ModalWindow.config.horizontalPadding).height(ModalWindow.config.height - ModalWindow.config.verticalPadding);
        }

        openaksess.common.debug("common.ModalWindow.open(): Modal window opened.");

    },


    /**
     * Closes the current modal.
     */
    close: function(){
        openaksess.common.debug("common.ModalWindow.close()");
        $content.dialog('close');
    }

};



