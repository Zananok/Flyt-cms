//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>
//<%@ taglib prefix="kantega" uri="http://www.kantega.no/aksess/tags/commons" %>
//<%@ page import="no.kantega.publishing.common.Aksess" %>
//<%
request.setAttribute("aksess_locale", Aksess.getDefaultAdminLocale());
//%>

/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/********************************************************************************
 * Common functions
 ********************************************************************************/

var openaksess =  {
    // All Javascript objects should use this namespace
};

openaksess.common = {
    columnize : function() {
        var columnized = $(".columnized");
        debug("openaksess.common(): Number of elements found to columnize: " + columnized.size());
        if (columnized.size() > 0) {
            var columncount = 1;
            var classes = columnized.attr("class").split(" ");
            for (var i in classes) {
                var c = classes[i];
                if (c.indexOf("columnCount") > -1) {
                    columncount = parseInt(c.substring("columnCount".length, c.length));
                }
            }
            debug("openaksess.common(): Column count: " + columncount);
            columnized.makeacolumnlists({cols:columncount,colWidth:0,equalHeight:false,startN:1});
        }
    }
};

var stateHandler = new StateHandler();

$(document).ready(function() {
    debug("common.$(document).ready()");
    if (window.dwr) {
        dwr.engine.setHeaders({ "X-Requested-With":"XMLHttpRequest"});
    }
    setWindowSize();
    ajaxSetup();
    WidgetManager.init({context: '#Content'});
});



/**
 * Adjusts the height and width of the iframe onload and onresize.
 */
function setWindowSize() {
    $(window).bind('resize load', function(e) {
        debug("common.setWindowSize(): " + e.type + " event received");

        var windowHeight = $(window).height();
        var windowWidth = $(window).width();
        var topHeight = $("#Top").height();
        var navigationWidth = $("#Navigation").width();
        var framesplitWidth = $("#Framesplit").outerWidth(true);

        debug("common.setWindowSize(): windowHeight: " + windowHeight + ", windowWidth: " + windowWidth + ", topHeight: " + topHeight+", navigationWidth: "+navigationWidth+", framesplitWidth: "+framesplitWidth);

        $('#Content').css('height', (windowHeight-topHeight) + 'px');

        if (typeof setLayoutSpecificSizes == 'function') {
            debug("common.setWindowSize(): setLayoutSpecificSizes function found");
            setLayoutSpecificSizes({window:{height: windowHeight, width: windowWidth}, top:{height:topHeight}, navigation:{width:navigationWidth},framesplit:{width:framesplitWidth}});
        }

    });
}

function ajaxSetup() {
    var $ajaxloading = $('<div id="AjaxLoadingIllustration" class="ajaxloading"><kantega:label key="aksess.ajax.loading"/></div>');
    $("body").append($ajaxloading);
    $ajaxloading.ajaxStart(function(){
        $(this).show();
    });

    $ajaxloading.ajaxStop(function(){
        $(this).hide();
    });
}



/**
 * Returns the value of a query string parameter
 *
 * @param paramName Query parameter name
 * @param queryString The total query string
 */
function getQueryParam(paramName, queryString) {
    var val = null;
    var inx = queryString.indexOf(paramName + "=");
    if (inx != -1) {
        val = queryString.substring(inx + paramName.length + 1, queryString.length);
        if (val.indexOf("&") != -1) {
            val = val.substring(0, val.indexOf("&"));
        }
    }
    return val;
}


/**
 * Prints a debug message to Firebug's debug console.
 *
 * @param msg Debug message. Convention: 'functionName(): value'
 */
function debug(msg) {
    var debugEnabled = <aksess:getconfig key="javascript.debug" default="false"/>;
    if (debugEnabled && $.browser.mozilla && typeof console != 'undefined') {
        var now = new Date();
        console.log(now.getHours()+":"+now.getMinutes()+":"+now.getSeconds()+now.getMilliseconds()+ " - " + msg);
    }
}


/**
 * Sets the currently viewed content in the user's session.
 *
 * @param url
 */
function notifyContentUpdate(url) {
    ContentStateHandler.notifyContentUpdate(url);
}

/**
 * Responsible for drawing pop-ups and modals.
 */
var ModalWindow = {

    $content: '',

    config: {
        title: 'OpenAksess',
        titlebar: true,
        resizable: true,
        modal: true,
        iframe: false,
        closeOnEscape: true,
        height: 400,
        width: 600,
        horizontalPadding: 0,
        verticalPadding: 0,
        open: function(){
            $.event.trigger("resize");
        },
        autoResize: true,
        autoOpen: true,
        overlay: {
            opacity: 0.2,
            background: "black"
        }
    },


    /**
     * Opens a modal with the desired properties.
     *
     * @param config
     */
    open: function(config){
        debug("common.ModalWindow.open(): config: " + config);

        if (config && typeof(config) == 'object') {
            debug("common.ModalWindow.open(): Extending default config with user supplied config.");
            $.extend(ModalWindow.config, config);
        }

        if (!ModalWindow.config.position) {
            ModalWindow.config.position = [(($(window).width()-ModalWindow.config.width)/2),(($(window).height()-ModalWindow.config.height)/2)];
        }


        if (ModalWindow.config.iframe) {
            $content = $('<iframe id="externalSite" src="' + ModalWindow.config.href + '" />');
        } else {
            $content = $("<div/>").load(ModalWindow.config.href);
        }

        debug("common.ModalWindow.open(): Opening modal window.");

        $content.dialog(ModalWindow.config);

        if (ModalWindow.config.iframe) {
            $content.width(ModalWindow.config.width - ModalWindow.config.horizontalPadding).height(ModalWindow.config.height - ModalWindow.config.verticalPadding);
        }

        debug("common.ModalWindow.open(): Modal window opened.");

    },


    /**
     * Closes the current modal.
     */
    close: function(){
        debug("common.ModalWindow.close()");
        $content.dialog('close');
    }

};


/**
 * Handles user settings (perferences). These can either be per session or permanent (persistent).
 */
var UserPreferences = {

    keys : {
        filter : {
            hideExpired: 'filterHideExpired',
            sort: 'filterSort',
            sites: 'filterSites'
        }
    },

    setPreference: function(key, value, permanent, callback){
        if (arguments.length == 3) {
            UserPreferencesHandler.setPreference({key:key, value:value, permanent:permanent});
        } else {
            UserPreferencesHandler.setPreference({key:key, value:value, permanent:permanent}, callback);
        }
    },

    getPreference: function(key, callback) {
        UserPreferencesHandler.getPreference(key, callback);
    }
};


/**
 * See http://benalman.com/projects/jquery-bbq-plugin/ for further details about the bbq-plugin.
 */
function StateHandler (){

    var currentState = '';

    this.init = function(updateEventType) {
        debug("common.StateHandler.init()");
        bindHashChange(updateEventType);
        $(window).trigger("hashchange");
    };

    this.setState = function(state) {
        debug("common.StateHandler.setState(): state: " + state);
        $.bbq.pushState({ state : state });
    };

    this.getState = function() {
        return currentState;
    };

    var bindHashChange = function(updateEventType) {
        debug("common.StateHandler._bindHashChange(): Binding hashchange event");
        $(window).bind( 'hashchange', function(e) {
            //Get the url from the state
            var state = $.bbq.getState('state');
            debug("common.StateHandler._bindHashChange(): hashchange event received. Url: " + state);

            if (state && state != this.currentState) {
                debug("common.StateHandler._bindHashChange(): New state ("+state+") different from current state ("+this.currentState+"). Triggering '"+updateEventType+ "' event.");
                $.event.trigger(updateEventType, state);
                currentState = state;
            }
        });
    };

};


var WidgetManager = {

    defaults : {
        context: 'body',
        widgetContainerClass: 'widgetcolumn',
        widgetClass: 'widget',
        widgetHeaderClass: 'widget-header',
        widgetContentClass: 'widget-content',
        minimizeClass: 'ui-icon ui-icon-minus',
        maximizeClass: 'ui-icon ui-icon-plus',
        closeClass: 'ui-icon ui-icon-close'
    },

    init : function(config){
        $.extend(this.defaults, config);

        var $columns = $('.'+this.defaults.widgetContainerClass, this.defaults.context);
        $columns.sortable({
            connectWith: this.defaults.context + ' .'+this.defaults.widgetContainerClass
        });

        var $widgets = $('.'+this.defaults.widgetClass, this.defaults.context);
        $widgets.addClass("ui-widget ui-widget-content ui-helper-clearfix")
                .find('.'+this.defaults.widgetHeaderClass)
                .addClass("ui-widget-header")
                .append('<span class="widget-controls"><span class="'+this.defaults.closeClass+'"></span><span class="'+this.defaults.minimizeClass+'"></span></span>');


        $widgets.find(".widget-header .widget-controls").live('click', function(e) {
            var $target = $(e.target);
            var $widget = $(this).parents(".widget:first");

            if ($target.hasClass(this.defaults.minimizeClass)) {
                this.minimize($widget);
            }
            else if ($target.hasClass(this.defaults.maximizeClass)) {
                this.maximize($widget);
            }
            else if($target.hasClass(this.defaults.closeClass)) {
                    this.remove($widget);
                }

        });

        $columns.disableSelection();
    },

    minimize: function(widget) {
        var $widget = this._getElementAsJquery(widget);
        $widget.find('.'+this.defaults.widgetHeaderClass+' .widget-controls :last').removeClass(this.defaults.minimizeClass).addClass(this.defaults.maximizeClass);
        $widget.find('.'+this.defaults.widgetContentClass).hide();
    },

    maximize: function(widget) {
        var $widget = this._getElementAsJquery(widget);
        $widget.find('.'+this.defaults.widgetHeaderClass+' .widget-controls :last').removeClass(this.defaults.maximizeClass).addClass(this.defaults.minimizeClass);
        $widget.find('.'+this.defaults.widgetContentClass).show();
    },

    remove: function(widget) {
        this._getElementAsJquery(widget).remove();
    },

    _getElementAsJquery: function(elem) {
        if (elem instanceof jQuery) {
            return elem;
        } else {
            return $(elem);
        }
    }
};

