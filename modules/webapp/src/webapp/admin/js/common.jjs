//<%@ taglib prefix="aksess" uri="http://www.kantega.no/aksess/tags/aksess"%>
/*
 * Copyright 2009 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/********************************************************************************
 * Common functions
 ********************************************************************************/
$(document).ready(function() {
    debug("common.$(document).ready()");
    if (window.dwr) {
        dwr.engine.setHeaders({ "X-Requested-With":"XMLHttpRequest"});
    }
    setWindowSize();
});



/**
 * Adjusts the height and width of the iframe onload and onresize.
 */
function setWindowSize() {
    $(window).bind('resize load', function(e) {
        debug("common.setWindowSize(): " + e.type + " event received");

        var windowHeight = $(window).height();
        var windowWidth = $(window).width();
        var topHeight = $("#Top").height();
        var navigationWidth = $("#Navigation").width();
        var framesplitWidth = $("#Framesplit").outerWidth(true);

        debug("common.setWindowSize(): windowHeight: " + windowHeight + ", windowWidth: " + windowWidth + ", topHeight: " + topHeight+", navigationWidth: "+navigationWidth+", framesplitWidth: "+framesplitWidth);

        $('#Content').css('height', (windowHeight-topHeight) + 'px');

        if (typeof setLayoutSpecificSizes == 'function') {
            debug("common.setWindowSize(): setLayoutSpecificSizes function found");
            setLayoutSpecificSizes({window:{height: windowHeight, width: windowWidth}, top:{height:topHeight}, navigation:{width:navigationWidth},framesplit:{width:framesplitWidth}});
        }

    });
}



/**
 * Returns the value of a query string parameter
 *
 * @param paramName Query parameter name
 * @param queryString The total query string
 */
function getQueryParam(paramName, queryString) {
    var val = null;
    var inx = queryString.indexOf(paramName + "=");
    if (inx != -1) {
        val = queryString.substring(inx + paramName.length + 1, queryString.length);
        if (val.indexOf("&") != -1) {
            val = val.substring(0, val.indexOf("&"));
        }
    }
    return val;
}


/**
 * Prints a debug message to Firebug's debug console.
 *
 * @param msg Debug message. Convention: 'functionName(): value'
 */
function debug(msg) {
    var debugEnabled = <aksess:getconfig key="javascript.debug" default="false"/>;
    if (debugEnabled && $.browser.mozilla && typeof console != 'undefined') {
        var now = new Date();
        console.log(now.getHours()+":"+now.getMinutes()+":"+now.getSeconds()+now.getMilliseconds()+ " - " + msg);
    }
}


/**
 * Sets the currently viewed content in the user's session.
 *
 * @param currentUrl
 */
function notifyContentUpdate(currentUrl) {
    ContentStateHandler.notifyContentUpdate(currentUrl);
}

/**
 * Responsible for drawing pop-ups and modals.
 */
var ModalWindow = {

    $content: '',

    config: {
        title: 'OpenAksess',
        titlebar: true,
        resizable: true,
        modal: true,
        iframe: false,
        closeOnEscape: true,
        height: 400,
        width: 600,
        horizontalPadding: 0,
        verticalPadding: 0,
        open: function(){
                $.event.trigger("resize");
        },
        autoResize: true,
        autoOpen: true,
        overlay: {
            opacity: 0.2,
            background: "black"
        }
    },


    /**
     * Opens a modal with the desired properties.
     *
     * @param config
     */
    open: function(config){
        debug("common.ModalWindow.open(): config: " + config);

        if (config && typeof(config) == 'object') {
            debug("common.ModalWindow.open(): Extending default config with user supplied config.");
            $.extend(ModalWindow.config, config);
        }
        
        if (!ModalWindow.config.position) {
            ModalWindow.config.position = [(($(window).width()-ModalWindow.config.width)/2),(($(window).height()-ModalWindow.config.height)/2)];
        }


        if (ModalWindow.config.iframe) {
            $content = $('<iframe id="externalSite" src="' + ModalWindow.config.href + '" />');
        } else {
            $content = $("<div/>").load(ModalWindow.config.href);
        }
        
        debug("common.ModalWindow.open(): Opening modal window.");

        $content.dialog(ModalWindow.config);

        if (ModalWindow.config.iframe) {
                $content.width(ModalWindow.config.width - ModalWindow.config.horizontalPadding).height(ModalWindow.config.height - ModalWindow.config.verticalPadding);
        }

        debug("common.ModalWindow.open(): Modal window opened.");

    },


    /**
     * Closes the current modal.
     */
    close: function(){
        debug("common.ModalWindow.close()");
        $content.dialog('close');    
    }

};
